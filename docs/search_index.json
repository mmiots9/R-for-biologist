[["index.html", "Learn R for biologist, with no fear About", " Learn R for biologist, with no fear Matteo Miotto 2023-07-25 About Ciao Fede, here we are. You really don’t know how happy I am for both of us: I’ll learn how to “teach”, while you’ll learn a coding language that will revolutionize your life, I’m sure of it hahaha We’ll see how to speed up analyses, how to automate them, how to untie ourselves from that cancer that is Excel, how to make beautiful graphs and how to gain time to do other things. First, you need to start with the installation and some basic concepts. Let’s start this beautiful journey! "],["installation.html", "1 Installation", " 1 Installation First of all, we need to install R to be able to use it. To do so, go to this link and follow the instruction for the installation. … Done?! Great, now you can start using R on your pc, directly from your terminal: but since it is an inconvenient and ancient way, let’s take advantage of the potential and functions of RStudio to be true professionals. Go here and download this amazing software. … Done?! Perfect, let’s open it. "],["first-step-in-rstudio.html", "2 First step in RStudio Console", " 2 First step in RStudio Don’t be intimidated by all these windows that you see open, we will slowly dig into them one by one. Console Let’s start from the console, that is the space where we will start writing the first commands and where their outputs are displayed. Let’s try a basic thing right away, using R as a calculator, type 2 + 2 on the console and press enter. 2+2 [1] 4 Easy right? It returns 4. Now you can start playing a bit with the various operations, you can also write long expressions and you will see how the result will be shown immediately. … Ok, but… usually we need the results of some operation to be saved, or often we want to use the same number several times without having to remember it, and this is where the concept of variable comes into play. "],["variables.html", "3 Variables Create a variable Use a variable Variable names Overwriting variables List all variables Delete variables Type of variables Exercises", " 3 Variables As mentioned, we often need some number (eg a concentration), some table (eg table of differentially expressed genes), information (eg the name of a protein) etc. to be saved in R to be able to use them later in the analysis. This is where variables come into play, and now we’ll see how to create them, how to reuse them, and what kinds of variables exist. Create a variable To create a variable we write name_of_the_variable &lt;- what_to_save (you can either use = instead of &lt;-, even if the former is usually used for declaring arguments in a function, but we’ll see it later). Now, write this to the console, click Return/send on the keyborard, and see what happens: myvar &lt;- 5 On the console nothing happens, but something appeared in the window called Environment (if yours is different, it may be that there is the “List” view setting instead of “Grid” in the blue box, you can change it to your liking). Here in details the info given for each variable: Name: name of the variable Type: type of the variable (don’t worry, we’ll see in a minute what this means) Length:: the length of the variable (how many items it contains) Size: how much memory that variable occupies Value: the value of our variable If we want to create multiple variables with the same value we can do this: var1 &lt;- var2 &lt;- var3 &lt;- 20 print(var1) [1] 20 print(var2) [1] 20 print(var3) [1] 20 Use a variable Ok, but once stored, how to we use a variable? Easy, we just need to type it in the console (or start writing the first letters of its name and press Tab to show RStudio suggestions). If, for example, we want to calculate the power of our variable we should write: myvar ** 2 [1] 25 And here is the result (to elevate to the power we can either use ** or ^). And what if we want to store this result? As before: myvar_power &lt;- myvar ** 2 print(myvar_power) [1] 25 Here we use print() function, but in R we can also just write the name of the variable to see it. Variable names As in everything, even in naming variables there are rules and guidelines. Don’t be scared, they are simple and will make your life easier, let’s see them together. Rules: Variable name CANNOT start with a character other than a letter Variable name can contain both letters and numbers (case sensitive, uppercase and lowercase matter) Variable name may contain as special characters only the dot . or the underscore _ Guidelines: Since the name of the variable must be useful, its name must suggest something: for example, the variable myvar was previously defined, whose meaning is equal to 0 (so avoid these names), while myvar_power is more indicative, as it tells us that it is raised to a power Variables are normally written in lowercase letters, except for those you want to remain constant in your analysis, which in other languages are written in uppercase (this does not make them immutable, but suggests this feature within the script) Use underscores rather than periods as special characters in variable names if you can If the variable name contains more than one word, you can separate them with an underscore (as in the example) or use the camel case (myvarPower) or the Pascal case (MyvarPower) Be consistent within the script: if you decide to use the Pascal case, always use the Pascal case in that script Overwriting variables Attention! Variables can be overwritten (unrecoverable action). To override a variable, simply assign that variable a new value: print(myvar) [1] 5 myvar &lt;- 9 print(myvar) [1] 9 Now myvar is equal to 9, and there is no way back… This feature is useful for saving space and not cluttering up too much with variables that are okay to change often, but it can be risky. So be careful when naming variables. List all variables A useful way to avoid overwriting an important variable is to list the variables. We know that in RStudio they are all present in the Environment window, but what if we weren’t in RStudio but elsewhere (for example in the terminal)? The answer is simple, let’s use the ls() function ls() [1] &quot;aa_num&quot; &quot;age&quot; &quot;age_inf_threshold&quot; &quot;age_sup_threshold&quot; &quot;all_string&quot; [6] &quot;areas&quot; &quot;c_patients&quot; &quot;ch1&quot; &quot;ch2&quot; &quot;ch3&quot; [11] &quot;ch4&quot; &quot;ch5&quot; &quot;ch6&quot; &quot;common&quot; &quot;common_all&quot; [16] &quot;common_mean&quot; &quot;common1_2&quot; &quot;condition&quot; &quot;ctrl_sex_age&quot; &quot;CXCR4&quot; [21] &quot;expr&quot; &quot;expr_data&quot; &quot;expr_data_t&quot; &quot;expr_levels&quot; &quot;expr_mat_pat&quot; [26] &quot;expr_values&quot; &quot;f_value&quot; &quot;features&quot; &quot;gene&quot; &quot;gene_2_keep&quot; [31] &quot;gene_to_test&quot; &quot;gene1&quot; &quot;gene2&quot; &quot;genes&quot; &quot;grep_1&quot; [36] &quot;grep_2&quot; &quot;grepl_1&quot; &quot;grepl_2&quot; &quot;gsub_all&quot; &quot;heights&quot; [41] &quot;idx&quot; &quot;is_odd&quot; &quot;LCT&quot; &quot;LHX9&quot; &quot;males_data&quot; [46] &quot;mean_col&quot; &quot;mean_res_better&quot; &quot;mean_res_better_round&quot; &quot;mean_result_calc&quot; &quot;mean_row&quot; [51] &quot;mean_time&quot; &quot;mice1&quot; &quot;mice2&quot; &quot;mice3&quot; &quot;mice4&quot; [56] &quot;mito_genes&quot; &quot;ml_to_add&quot; &quot;mother_diabetes&quot; &quot;mt_mat&quot; &quot;my_col_names&quot; [61] &quot;my_df&quot; &quot;my_info&quot; &quot;my_matrix&quot; &quot;my_matrix2&quot; &quot;my_max&quot; [66] &quot;my_mean&quot; &quot;my_min&quot; &quot;my_row_names&quot; &quot;my_sum&quot; &quot;my_vector&quot; [71] &quot;mychar_d&quot; &quot;mychar_s&quot; &quot;mynumber&quot; &quot;mystring&quot; &quot;myvar&quot; [76] &quot;myvar_power&quot; &quot;n_rep&quot; &quot;n_responders&quot; &quot;nationality&quot; &quot;no_seed1&quot; [81] &quot;no_seed2&quot; &quot;not_center&quot; &quot;num1&quot; &quot;num2&quot; &quot;only_1&quot; [86] &quot;only_2&quot; &quot;p_responders&quot; &quot;patien1_sub&quot; &quot;patien2_sub&quot; &quot;patien3_sub&quot; [91] &quot;patient_age&quot; &quot;patient_state&quot; &quot;patient_weight&quot; &quot;patient1&quot; &quot;patient2&quot; [96] &quot;patient3&quot; &quot;pattern_to_check_1&quot; &quot;pattern_to_check_2&quot; &quot;perc_mito&quot; &quot;perc_no_mito&quot; [101] &quot;proteins&quot; &quot;proteins1&quot; &quot;proteins2&quot; &quot;PTPN7&quot; &quot;r_numb&quot; [106] &quot;r_patients&quot; &quot;read_sum_gene&quot; &quot;read_sum_pat&quot; &quot;read_sum_pat_filt&quot; &quot;rep1&quot; [111] &quot;rep2&quot; &quot;rep3&quot; &quot;response&quot; &quot;sample&quot; &quot;sample0&quot; [116] &quot;sample1&quot; &quot;sample1_fr&quot; &quot;sample2&quot; &quot;sample2_fr&quot; &quot;sample3&quot; [121] &quot;sample3_fr&quot; &quot;sd_calc&quot; &quot;sd_calc_ceil&quot; &quot;sd_calc_floor&quot; &quot;sd_calc_round&quot; [126] &quot;sd_time&quot; &quot;sex&quot; &quot;sliced_odd&quot; &quot;sub_only&quot; &quot;sum_aa&quot; [131] &quot;sum_time&quot; &quot;sum_weights&quot; &quot;t_value&quot; &quot;time&quot; &quot;to_extract&quot; [136] &quot;to_print&quot; &quot;total_mito&quot; &quot;total_no_mito&quot; &quot;treatment&quot; &quot;upregulated_1&quot; [141] &quot;upregulated_2&quot; &quot;var_calc&quot; &quot;var1&quot; &quot;var2&quot; &quot;var3&quot; [146] &quot;weight&quot; &quot;weight_c&quot; &quot;weight_data&quot; &quot;weight_n&quot; &quot;weight_sup_threshold&quot; [151] &quot;with_seed1&quot; &quot;with_seed2&quot; Here are our variables. Note how I called this command with the name function: we will cover this concept later, for now you just need to know that they exist and that they can be identified immediately by the fact that after the name there is a pair of round brackets. Delete variables To delete a variable, use the rm() function and insert the variable to be deleted: # create a variable to_remove &lt;- 1213 # list all variables ls() [1] &quot;aa_num&quot; &quot;age&quot; &quot;age_inf_threshold&quot; &quot;age_sup_threshold&quot; &quot;all_string&quot; [6] &quot;areas&quot; &quot;c_patients&quot; &quot;ch1&quot; &quot;ch2&quot; &quot;ch3&quot; [11] &quot;ch4&quot; &quot;ch5&quot; &quot;ch6&quot; &quot;common&quot; &quot;common_all&quot; [16] &quot;common_mean&quot; &quot;common1_2&quot; &quot;condition&quot; &quot;ctrl_sex_age&quot; &quot;CXCR4&quot; [21] &quot;expr&quot; &quot;expr_data&quot; &quot;expr_data_t&quot; &quot;expr_levels&quot; &quot;expr_mat_pat&quot; [26] &quot;expr_values&quot; &quot;f_value&quot; &quot;features&quot; &quot;gene&quot; &quot;gene_2_keep&quot; [31] &quot;gene_to_test&quot; &quot;gene1&quot; &quot;gene2&quot; &quot;genes&quot; &quot;grep_1&quot; [36] &quot;grep_2&quot; &quot;grepl_1&quot; &quot;grepl_2&quot; &quot;gsub_all&quot; &quot;heights&quot; [41] &quot;idx&quot; &quot;is_odd&quot; &quot;LCT&quot; &quot;LHX9&quot; &quot;males_data&quot; [46] &quot;mean_col&quot; &quot;mean_res_better&quot; &quot;mean_res_better_round&quot; &quot;mean_result_calc&quot; &quot;mean_row&quot; [51] &quot;mean_time&quot; &quot;mice1&quot; &quot;mice2&quot; &quot;mice3&quot; &quot;mice4&quot; [56] &quot;mito_genes&quot; &quot;ml_to_add&quot; &quot;mother_diabetes&quot; &quot;mt_mat&quot; &quot;my_col_names&quot; [61] &quot;my_df&quot; &quot;my_info&quot; &quot;my_matrix&quot; &quot;my_matrix2&quot; &quot;my_max&quot; [66] &quot;my_mean&quot; &quot;my_min&quot; &quot;my_row_names&quot; &quot;my_sum&quot; &quot;my_vector&quot; [71] &quot;mychar_d&quot; &quot;mychar_s&quot; &quot;mynumber&quot; &quot;mystring&quot; &quot;myvar&quot; [76] &quot;myvar_power&quot; &quot;n_rep&quot; &quot;n_responders&quot; &quot;nationality&quot; &quot;no_seed1&quot; [81] &quot;no_seed2&quot; &quot;not_center&quot; &quot;num1&quot; &quot;num2&quot; &quot;only_1&quot; [86] &quot;only_2&quot; &quot;p_responders&quot; &quot;patien1_sub&quot; &quot;patien2_sub&quot; &quot;patien3_sub&quot; [91] &quot;patient_age&quot; &quot;patient_state&quot; &quot;patient_weight&quot; &quot;patient1&quot; &quot;patient2&quot; [96] &quot;patient3&quot; &quot;pattern_to_check_1&quot; &quot;pattern_to_check_2&quot; &quot;perc_mito&quot; &quot;perc_no_mito&quot; [101] &quot;proteins&quot; &quot;proteins1&quot; &quot;proteins2&quot; &quot;PTPN7&quot; &quot;r_numb&quot; [106] &quot;r_patients&quot; &quot;read_sum_gene&quot; &quot;read_sum_pat&quot; &quot;read_sum_pat_filt&quot; &quot;rep1&quot; [111] &quot;rep2&quot; &quot;rep3&quot; &quot;response&quot; &quot;sample&quot; &quot;sample0&quot; [116] &quot;sample1&quot; &quot;sample1_fr&quot; &quot;sample2&quot; &quot;sample2_fr&quot; &quot;sample3&quot; [121] &quot;sample3_fr&quot; &quot;sd_calc&quot; &quot;sd_calc_ceil&quot; &quot;sd_calc_floor&quot; &quot;sd_calc_round&quot; [126] &quot;sd_time&quot; &quot;sex&quot; &quot;sliced_odd&quot; &quot;sub_only&quot; &quot;sum_aa&quot; [131] &quot;sum_time&quot; &quot;sum_weights&quot; &quot;t_value&quot; &quot;time&quot; &quot;to_extract&quot; [136] &quot;to_print&quot; &quot;to_remove&quot; &quot;total_mito&quot; &quot;total_no_mito&quot; &quot;treatment&quot; [141] &quot;upregulated_1&quot; &quot;upregulated_2&quot; &quot;var_calc&quot; &quot;var1&quot; &quot;var2&quot; [146] &quot;var3&quot; &quot;weight&quot; &quot;weight_c&quot; &quot;weight_data&quot; &quot;weight_n&quot; [151] &quot;weight_sup_threshold&quot; &quot;with_seed1&quot; &quot;with_seed2&quot; # delete just-created variable rm(to_remove) # list all variables ls() [1] &quot;aa_num&quot; &quot;age&quot; &quot;age_inf_threshold&quot; &quot;age_sup_threshold&quot; &quot;all_string&quot; [6] &quot;areas&quot; &quot;c_patients&quot; &quot;ch1&quot; &quot;ch2&quot; &quot;ch3&quot; [11] &quot;ch4&quot; &quot;ch5&quot; &quot;ch6&quot; &quot;common&quot; &quot;common_all&quot; [16] &quot;common_mean&quot; &quot;common1_2&quot; &quot;condition&quot; &quot;ctrl_sex_age&quot; &quot;CXCR4&quot; [21] &quot;expr&quot; &quot;expr_data&quot; &quot;expr_data_t&quot; &quot;expr_levels&quot; &quot;expr_mat_pat&quot; [26] &quot;expr_values&quot; &quot;f_value&quot; &quot;features&quot; &quot;gene&quot; &quot;gene_2_keep&quot; [31] &quot;gene_to_test&quot; &quot;gene1&quot; &quot;gene2&quot; &quot;genes&quot; &quot;grep_1&quot; [36] &quot;grep_2&quot; &quot;grepl_1&quot; &quot;grepl_2&quot; &quot;gsub_all&quot; &quot;heights&quot; [41] &quot;idx&quot; &quot;is_odd&quot; &quot;LCT&quot; &quot;LHX9&quot; &quot;males_data&quot; [46] &quot;mean_col&quot; &quot;mean_res_better&quot; &quot;mean_res_better_round&quot; &quot;mean_result_calc&quot; &quot;mean_row&quot; [51] &quot;mean_time&quot; &quot;mice1&quot; &quot;mice2&quot; &quot;mice3&quot; &quot;mice4&quot; [56] &quot;mito_genes&quot; &quot;ml_to_add&quot; &quot;mother_diabetes&quot; &quot;mt_mat&quot; &quot;my_col_names&quot; [61] &quot;my_df&quot; &quot;my_info&quot; &quot;my_matrix&quot; &quot;my_matrix2&quot; &quot;my_max&quot; [66] &quot;my_mean&quot; &quot;my_min&quot; &quot;my_row_names&quot; &quot;my_sum&quot; &quot;my_vector&quot; [71] &quot;mychar_d&quot; &quot;mychar_s&quot; &quot;mynumber&quot; &quot;mystring&quot; &quot;myvar&quot; [76] &quot;myvar_power&quot; &quot;n_rep&quot; &quot;n_responders&quot; &quot;nationality&quot; &quot;no_seed1&quot; [81] &quot;no_seed2&quot; &quot;not_center&quot; &quot;num1&quot; &quot;num2&quot; &quot;only_1&quot; [86] &quot;only_2&quot; &quot;p_responders&quot; &quot;patien1_sub&quot; &quot;patien2_sub&quot; &quot;patien3_sub&quot; [91] &quot;patient_age&quot; &quot;patient_state&quot; &quot;patient_weight&quot; &quot;patient1&quot; &quot;patient2&quot; [96] &quot;patient3&quot; &quot;pattern_to_check_1&quot; &quot;pattern_to_check_2&quot; &quot;perc_mito&quot; &quot;perc_no_mito&quot; [101] &quot;proteins&quot; &quot;proteins1&quot; &quot;proteins2&quot; &quot;PTPN7&quot; &quot;r_numb&quot; [106] &quot;r_patients&quot; &quot;read_sum_gene&quot; &quot;read_sum_pat&quot; &quot;read_sum_pat_filt&quot; &quot;rep1&quot; [111] &quot;rep2&quot; &quot;rep3&quot; &quot;response&quot; &quot;sample&quot; &quot;sample0&quot; [116] &quot;sample1&quot; &quot;sample1_fr&quot; &quot;sample2&quot; &quot;sample2_fr&quot; &quot;sample3&quot; [121] &quot;sample3_fr&quot; &quot;sd_calc&quot; &quot;sd_calc_ceil&quot; &quot;sd_calc_floor&quot; &quot;sd_calc_round&quot; [126] &quot;sd_time&quot; &quot;sex&quot; &quot;sliced_odd&quot; &quot;sub_only&quot; &quot;sum_aa&quot; [131] &quot;sum_time&quot; &quot;sum_weights&quot; &quot;t_value&quot; &quot;time&quot; &quot;to_extract&quot; [136] &quot;to_print&quot; &quot;total_mito&quot; &quot;total_no_mito&quot; &quot;treatment&quot; &quot;upregulated_1&quot; [141] &quot;upregulated_2&quot; &quot;var_calc&quot; &quot;var1&quot; &quot;var2&quot; &quot;var3&quot; [146] &quot;weight&quot; &quot;weight_c&quot; &quot;weight_data&quot; &quot;weight_n&quot; &quot;weight_sup_threshold&quot; [151] &quot;with_seed1&quot; &quot;with_seed2&quot; As we see, in the second case the to_remove variable has been removed. What if I want to remove multiple variables? Let’s put multiple variable names inside the rm() function separated by commas: # create various variables to_remove &lt;- 1213 to_remove2 &lt;- 685 # list all variables ls() [1] &quot;aa_num&quot; &quot;age&quot; &quot;age_inf_threshold&quot; &quot;age_sup_threshold&quot; &quot;all_string&quot; [6] &quot;areas&quot; &quot;c_patients&quot; &quot;ch1&quot; &quot;ch2&quot; &quot;ch3&quot; [11] &quot;ch4&quot; &quot;ch5&quot; &quot;ch6&quot; &quot;common&quot; &quot;common_all&quot; [16] &quot;common_mean&quot; &quot;common1_2&quot; &quot;condition&quot; &quot;ctrl_sex_age&quot; &quot;CXCR4&quot; [21] &quot;expr&quot; &quot;expr_data&quot; &quot;expr_data_t&quot; &quot;expr_levels&quot; &quot;expr_mat_pat&quot; [26] &quot;expr_values&quot; &quot;f_value&quot; &quot;features&quot; &quot;gene&quot; &quot;gene_2_keep&quot; [31] &quot;gene_to_test&quot; &quot;gene1&quot; &quot;gene2&quot; &quot;genes&quot; &quot;grep_1&quot; [36] &quot;grep_2&quot; &quot;grepl_1&quot; &quot;grepl_2&quot; &quot;gsub_all&quot; &quot;heights&quot; [41] &quot;idx&quot; &quot;is_odd&quot; &quot;LCT&quot; &quot;LHX9&quot; &quot;males_data&quot; [46] &quot;mean_col&quot; &quot;mean_res_better&quot; &quot;mean_res_better_round&quot; &quot;mean_result_calc&quot; &quot;mean_row&quot; [51] &quot;mean_time&quot; &quot;mice1&quot; &quot;mice2&quot; &quot;mice3&quot; &quot;mice4&quot; [56] &quot;mito_genes&quot; &quot;ml_to_add&quot; &quot;mother_diabetes&quot; &quot;mt_mat&quot; &quot;my_col_names&quot; [61] &quot;my_df&quot; &quot;my_info&quot; &quot;my_matrix&quot; &quot;my_matrix2&quot; &quot;my_max&quot; [66] &quot;my_mean&quot; &quot;my_min&quot; &quot;my_row_names&quot; &quot;my_sum&quot; &quot;my_vector&quot; [71] &quot;mychar_d&quot; &quot;mychar_s&quot; &quot;mynumber&quot; &quot;mystring&quot; &quot;myvar&quot; [76] &quot;myvar_power&quot; &quot;n_rep&quot; &quot;n_responders&quot; &quot;nationality&quot; &quot;no_seed1&quot; [81] &quot;no_seed2&quot; &quot;not_center&quot; &quot;num1&quot; &quot;num2&quot; &quot;only_1&quot; [86] &quot;only_2&quot; &quot;p_responders&quot; &quot;patien1_sub&quot; &quot;patien2_sub&quot; &quot;patien3_sub&quot; [91] &quot;patient_age&quot; &quot;patient_state&quot; &quot;patient_weight&quot; &quot;patient1&quot; &quot;patient2&quot; [96] &quot;patient3&quot; &quot;pattern_to_check_1&quot; &quot;pattern_to_check_2&quot; &quot;perc_mito&quot; &quot;perc_no_mito&quot; [101] &quot;proteins&quot; &quot;proteins1&quot; &quot;proteins2&quot; &quot;PTPN7&quot; &quot;r_numb&quot; [106] &quot;r_patients&quot; &quot;read_sum_gene&quot; &quot;read_sum_pat&quot; &quot;read_sum_pat_filt&quot; &quot;rep1&quot; [111] &quot;rep2&quot; &quot;rep3&quot; &quot;response&quot; &quot;sample&quot; &quot;sample0&quot; [116] &quot;sample1&quot; &quot;sample1_fr&quot; &quot;sample2&quot; &quot;sample2_fr&quot; &quot;sample3&quot; [121] &quot;sample3_fr&quot; &quot;sd_calc&quot; &quot;sd_calc_ceil&quot; &quot;sd_calc_floor&quot; &quot;sd_calc_round&quot; [126] &quot;sd_time&quot; &quot;sex&quot; &quot;sliced_odd&quot; &quot;sub_only&quot; &quot;sum_aa&quot; [131] &quot;sum_time&quot; &quot;sum_weights&quot; &quot;t_value&quot; &quot;time&quot; &quot;to_extract&quot; [136] &quot;to_print&quot; &quot;to_remove&quot; &quot;to_remove2&quot; &quot;total_mito&quot; &quot;total_no_mito&quot; [141] &quot;treatment&quot; &quot;upregulated_1&quot; &quot;upregulated_2&quot; &quot;var_calc&quot; &quot;var1&quot; [146] &quot;var2&quot; &quot;var3&quot; &quot;weight&quot; &quot;weight_c&quot; &quot;weight_data&quot; [151] &quot;weight_n&quot; &quot;weight_sup_threshold&quot; &quot;with_seed1&quot; &quot;with_seed2&quot; # delete just-created variables rm(to_remove, to_remove2) # list all variables ls() [1] &quot;aa_num&quot; &quot;age&quot; &quot;age_inf_threshold&quot; &quot;age_sup_threshold&quot; &quot;all_string&quot; [6] &quot;areas&quot; &quot;c_patients&quot; &quot;ch1&quot; &quot;ch2&quot; &quot;ch3&quot; [11] &quot;ch4&quot; &quot;ch5&quot; &quot;ch6&quot; &quot;common&quot; &quot;common_all&quot; [16] &quot;common_mean&quot; &quot;common1_2&quot; &quot;condition&quot; &quot;ctrl_sex_age&quot; &quot;CXCR4&quot; [21] &quot;expr&quot; &quot;expr_data&quot; &quot;expr_data_t&quot; &quot;expr_levels&quot; &quot;expr_mat_pat&quot; [26] &quot;expr_values&quot; &quot;f_value&quot; &quot;features&quot; &quot;gene&quot; &quot;gene_2_keep&quot; [31] &quot;gene_to_test&quot; &quot;gene1&quot; &quot;gene2&quot; &quot;genes&quot; &quot;grep_1&quot; [36] &quot;grep_2&quot; &quot;grepl_1&quot; &quot;grepl_2&quot; &quot;gsub_all&quot; &quot;heights&quot; [41] &quot;idx&quot; &quot;is_odd&quot; &quot;LCT&quot; &quot;LHX9&quot; &quot;males_data&quot; [46] &quot;mean_col&quot; &quot;mean_res_better&quot; &quot;mean_res_better_round&quot; &quot;mean_result_calc&quot; &quot;mean_row&quot; [51] &quot;mean_time&quot; &quot;mice1&quot; &quot;mice2&quot; &quot;mice3&quot; &quot;mice4&quot; [56] &quot;mito_genes&quot; &quot;ml_to_add&quot; &quot;mother_diabetes&quot; &quot;mt_mat&quot; &quot;my_col_names&quot; [61] &quot;my_df&quot; &quot;my_info&quot; &quot;my_matrix&quot; &quot;my_matrix2&quot; &quot;my_max&quot; [66] &quot;my_mean&quot; &quot;my_min&quot; &quot;my_row_names&quot; &quot;my_sum&quot; &quot;my_vector&quot; [71] &quot;mychar_d&quot; &quot;mychar_s&quot; &quot;mynumber&quot; &quot;mystring&quot; &quot;myvar&quot; [76] &quot;myvar_power&quot; &quot;n_rep&quot; &quot;n_responders&quot; &quot;nationality&quot; &quot;no_seed1&quot; [81] &quot;no_seed2&quot; &quot;not_center&quot; &quot;num1&quot; &quot;num2&quot; &quot;only_1&quot; [86] &quot;only_2&quot; &quot;p_responders&quot; &quot;patien1_sub&quot; &quot;patien2_sub&quot; &quot;patien3_sub&quot; [91] &quot;patient_age&quot; &quot;patient_state&quot; &quot;patient_weight&quot; &quot;patient1&quot; &quot;patient2&quot; [96] &quot;patient3&quot; &quot;pattern_to_check_1&quot; &quot;pattern_to_check_2&quot; &quot;perc_mito&quot; &quot;perc_no_mito&quot; [101] &quot;proteins&quot; &quot;proteins1&quot; &quot;proteins2&quot; &quot;PTPN7&quot; &quot;r_numb&quot; [106] &quot;r_patients&quot; &quot;read_sum_gene&quot; &quot;read_sum_pat&quot; &quot;read_sum_pat_filt&quot; &quot;rep1&quot; [111] &quot;rep2&quot; &quot;rep3&quot; &quot;response&quot; &quot;sample&quot; &quot;sample0&quot; [116] &quot;sample1&quot; &quot;sample1_fr&quot; &quot;sample2&quot; &quot;sample2_fr&quot; &quot;sample3&quot; [121] &quot;sample3_fr&quot; &quot;sd_calc&quot; &quot;sd_calc_ceil&quot; &quot;sd_calc_floor&quot; &quot;sd_calc_round&quot; [126] &quot;sd_time&quot; &quot;sex&quot; &quot;sliced_odd&quot; &quot;sub_only&quot; &quot;sum_aa&quot; [131] &quot;sum_time&quot; &quot;sum_weights&quot; &quot;t_value&quot; &quot;time&quot; &quot;to_extract&quot; [136] &quot;to_print&quot; &quot;total_mito&quot; &quot;total_no_mito&quot; &quot;treatment&quot; &quot;upregulated_1&quot; [141] &quot;upregulated_2&quot; &quot;var_calc&quot; &quot;var1&quot; &quot;var2&quot; &quot;var3&quot; [146] &quot;weight&quot; &quot;weight_c&quot; &quot;weight_data&quot; &quot;weight_n&quot; &quot;weight_sup_threshold&quot; [151] &quot;with_seed1&quot; &quot;with_seed2&quot; The two variables have been removed. But looking closely at these codes, we see that some start with # and are not evaluated. What are they? These are the comments, i.e. messages that you will write in the scripts (and we will see later how to create them) to help you understand what you are doing. They are actual comments that you can add, and will not be “evaluated” as code as the line starts with #. Type of variables So far so linear, right? Great, it will continue to be as easy 🙃. Let’s see what are the basic types of variables that exist in R: Numeric: numbers, can be integer (whole numbers) or double (decimal numbers) Character: characters, therefore strings of letters (words, sentences, etc.) Boolean: TRUE or FALSE, are a special type of variable that R interprets in its own way, but super super super useful Factor: similar to character, but with peculiar features (and memory saving), often used for categorical variables such as male/female, heterozygous/wild-type We will see each type of variable in detail in next chapters. To find out what type a variable is we use the typeof() function: typeof(myvar) [1] &quot;double&quot; We see that myvar is a double (although it is an integer value), this is because R basically interprets every number as a double, so as to increase its precision and the possibility of operations between various numbers without having type problems. Exercises Ok, this chapter was long enough, let’s do some exercises to fix well these concepts. Exercise 3.1 Create 3 variables indicating the weights of 3 mice. Solution mice1 &lt;- 5.8 mice2 &lt;- 4.8 mice3 &lt;- 7.5 print(mice1) [1] 5.8 print(mice2) [1] 4.8 print(mice3) [1] 7.5 Exercise 3.2 Create the variable sum_weights as the sum of the weights of those 3 mice. Solution sum_weights &lt;- mice1 + mice2 + mice3 print(sum_weights) [1] 18.1 Exercise 3.3 Create 4 other variables for other 4 mice that weight 20 g. Then you realize you did a mistake and you choose to delete 3 of them and change the fourth to 7.7. Solution # create 4 variables mice4 &lt;- mice5 &lt;- mice6 &lt;- mice7 &lt;- 20 # list all variables ls() [1] &quot;aa_num&quot; &quot;age&quot; &quot;age_inf_threshold&quot; &quot;age_sup_threshold&quot; &quot;all_string&quot; [6] &quot;areas&quot; &quot;c_patients&quot; &quot;ch1&quot; &quot;ch2&quot; &quot;ch3&quot; [11] &quot;ch4&quot; &quot;ch5&quot; &quot;ch6&quot; &quot;common&quot; &quot;common_all&quot; [16] &quot;common_mean&quot; &quot;common1_2&quot; &quot;condition&quot; &quot;ctrl_sex_age&quot; &quot;CXCR4&quot; [21] &quot;expr&quot; &quot;expr_data&quot; &quot;expr_data_t&quot; &quot;expr_levels&quot; &quot;expr_mat_pat&quot; [26] &quot;expr_values&quot; &quot;f_value&quot; &quot;features&quot; &quot;gene&quot; &quot;gene_2_keep&quot; [31] &quot;gene_to_test&quot; &quot;gene1&quot; &quot;gene2&quot; &quot;genes&quot; &quot;grep_1&quot; [36] &quot;grep_2&quot; &quot;grepl_1&quot; &quot;grepl_2&quot; &quot;gsub_all&quot; &quot;heights&quot; [41] &quot;idx&quot; &quot;is_odd&quot; &quot;LCT&quot; &quot;LHX9&quot; &quot;males_data&quot; [46] &quot;mean_col&quot; &quot;mean_res_better&quot; &quot;mean_res_better_round&quot; &quot;mean_result_calc&quot; &quot;mean_row&quot; [51] &quot;mean_time&quot; &quot;mice1&quot; &quot;mice2&quot; &quot;mice3&quot; &quot;mice4&quot; [56] &quot;mice5&quot; &quot;mice6&quot; &quot;mice7&quot; &quot;mito_genes&quot; &quot;ml_to_add&quot; [61] &quot;mother_diabetes&quot; &quot;mt_mat&quot; &quot;my_col_names&quot; &quot;my_df&quot; &quot;my_info&quot; [66] &quot;my_matrix&quot; &quot;my_matrix2&quot; &quot;my_max&quot; &quot;my_mean&quot; &quot;my_min&quot; [71] &quot;my_row_names&quot; &quot;my_sum&quot; &quot;my_vector&quot; &quot;mychar_d&quot; &quot;mychar_s&quot; [76] &quot;mynumber&quot; &quot;mystring&quot; &quot;myvar&quot; &quot;myvar_power&quot; &quot;n_rep&quot; [81] &quot;n_responders&quot; &quot;nationality&quot; &quot;no_seed1&quot; &quot;no_seed2&quot; &quot;not_center&quot; [86] &quot;num1&quot; &quot;num2&quot; &quot;only_1&quot; &quot;only_2&quot; &quot;p_responders&quot; [91] &quot;patien1_sub&quot; &quot;patien2_sub&quot; &quot;patien3_sub&quot; &quot;patient_age&quot; &quot;patient_state&quot; [96] &quot;patient_weight&quot; &quot;patient1&quot; &quot;patient2&quot; &quot;patient3&quot; &quot;pattern_to_check_1&quot; [101] &quot;pattern_to_check_2&quot; &quot;perc_mito&quot; &quot;perc_no_mito&quot; &quot;proteins&quot; &quot;proteins1&quot; [106] &quot;proteins2&quot; &quot;PTPN7&quot; &quot;r_numb&quot; &quot;r_patients&quot; &quot;read_sum_gene&quot; [111] &quot;read_sum_pat&quot; &quot;read_sum_pat_filt&quot; &quot;rep1&quot; &quot;rep2&quot; &quot;rep3&quot; [116] &quot;response&quot; &quot;sample&quot; &quot;sample0&quot; &quot;sample1&quot; &quot;sample1_fr&quot; [121] &quot;sample2&quot; &quot;sample2_fr&quot; &quot;sample3&quot; &quot;sample3_fr&quot; &quot;sd_calc&quot; [126] &quot;sd_calc_ceil&quot; &quot;sd_calc_floor&quot; &quot;sd_calc_round&quot; &quot;sd_time&quot; &quot;sex&quot; [131] &quot;sliced_odd&quot; &quot;sub_only&quot; &quot;sum_aa&quot; &quot;sum_time&quot; &quot;sum_weights&quot; [136] &quot;t_value&quot; &quot;time&quot; &quot;to_extract&quot; &quot;to_print&quot; &quot;total_mito&quot; [141] &quot;total_no_mito&quot; &quot;treatment&quot; &quot;upregulated_1&quot; &quot;upregulated_2&quot; &quot;var_calc&quot; [146] &quot;var1&quot; &quot;var2&quot; &quot;var3&quot; &quot;weight&quot; &quot;weight_c&quot; [151] &quot;weight_data&quot; &quot;weight_n&quot; &quot;weight_sup_threshold&quot; &quot;with_seed1&quot; &quot;with_seed2&quot; # delete 3 of the just-created variables rm(mice5, mice6, mice7) # list all variables ls() [1] &quot;aa_num&quot; &quot;age&quot; &quot;age_inf_threshold&quot; &quot;age_sup_threshold&quot; &quot;all_string&quot; [6] &quot;areas&quot; &quot;c_patients&quot; &quot;ch1&quot; &quot;ch2&quot; &quot;ch3&quot; [11] &quot;ch4&quot; &quot;ch5&quot; &quot;ch6&quot; &quot;common&quot; &quot;common_all&quot; [16] &quot;common_mean&quot; &quot;common1_2&quot; &quot;condition&quot; &quot;ctrl_sex_age&quot; &quot;CXCR4&quot; [21] &quot;expr&quot; &quot;expr_data&quot; &quot;expr_data_t&quot; &quot;expr_levels&quot; &quot;expr_mat_pat&quot; [26] &quot;expr_values&quot; &quot;f_value&quot; &quot;features&quot; &quot;gene&quot; &quot;gene_2_keep&quot; [31] &quot;gene_to_test&quot; &quot;gene1&quot; &quot;gene2&quot; &quot;genes&quot; &quot;grep_1&quot; [36] &quot;grep_2&quot; &quot;grepl_1&quot; &quot;grepl_2&quot; &quot;gsub_all&quot; &quot;heights&quot; [41] &quot;idx&quot; &quot;is_odd&quot; &quot;LCT&quot; &quot;LHX9&quot; &quot;males_data&quot; [46] &quot;mean_col&quot; &quot;mean_res_better&quot; &quot;mean_res_better_round&quot; &quot;mean_result_calc&quot; &quot;mean_row&quot; [51] &quot;mean_time&quot; &quot;mice1&quot; &quot;mice2&quot; &quot;mice3&quot; &quot;mice4&quot; [56] &quot;mito_genes&quot; &quot;ml_to_add&quot; &quot;mother_diabetes&quot; &quot;mt_mat&quot; &quot;my_col_names&quot; [61] &quot;my_df&quot; &quot;my_info&quot; &quot;my_matrix&quot; &quot;my_matrix2&quot; &quot;my_max&quot; [66] &quot;my_mean&quot; &quot;my_min&quot; &quot;my_row_names&quot; &quot;my_sum&quot; &quot;my_vector&quot; [71] &quot;mychar_d&quot; &quot;mychar_s&quot; &quot;mynumber&quot; &quot;mystring&quot; &quot;myvar&quot; [76] &quot;myvar_power&quot; &quot;n_rep&quot; &quot;n_responders&quot; &quot;nationality&quot; &quot;no_seed1&quot; [81] &quot;no_seed2&quot; &quot;not_center&quot; &quot;num1&quot; &quot;num2&quot; &quot;only_1&quot; [86] &quot;only_2&quot; &quot;p_responders&quot; &quot;patien1_sub&quot; &quot;patien2_sub&quot; &quot;patien3_sub&quot; [91] &quot;patient_age&quot; &quot;patient_state&quot; &quot;patient_weight&quot; &quot;patient1&quot; &quot;patient2&quot; [96] &quot;patient3&quot; &quot;pattern_to_check_1&quot; &quot;pattern_to_check_2&quot; &quot;perc_mito&quot; &quot;perc_no_mito&quot; [101] &quot;proteins&quot; &quot;proteins1&quot; &quot;proteins2&quot; &quot;PTPN7&quot; &quot;r_numb&quot; [106] &quot;r_patients&quot; &quot;read_sum_gene&quot; &quot;read_sum_pat&quot; &quot;read_sum_pat_filt&quot; &quot;rep1&quot; [111] &quot;rep2&quot; &quot;rep3&quot; &quot;response&quot; &quot;sample&quot; &quot;sample0&quot; [116] &quot;sample1&quot; &quot;sample1_fr&quot; &quot;sample2&quot; &quot;sample2_fr&quot; &quot;sample3&quot; [121] &quot;sample3_fr&quot; &quot;sd_calc&quot; &quot;sd_calc_ceil&quot; &quot;sd_calc_floor&quot; &quot;sd_calc_round&quot; [126] &quot;sd_time&quot; &quot;sex&quot; &quot;sliced_odd&quot; &quot;sub_only&quot; &quot;sum_aa&quot; [131] &quot;sum_time&quot; &quot;sum_weights&quot; &quot;t_value&quot; &quot;time&quot; &quot;to_extract&quot; [136] &quot;to_print&quot; &quot;total_mito&quot; &quot;total_no_mito&quot; &quot;treatment&quot; &quot;upregulated_1&quot; [141] &quot;upregulated_2&quot; &quot;var_calc&quot; &quot;var1&quot; &quot;var2&quot; &quot;var3&quot; [146] &quot;weight&quot; &quot;weight_c&quot; &quot;weight_data&quot; &quot;weight_n&quot; &quot;weight_sup_threshold&quot; [151] &quot;with_seed1&quot; &quot;with_seed2&quot; # change the value of one variable mice4 &lt;- 7.7 print(mice4) [1] 7.7 Alright, if you have done all the exercises (and I’m sure you have), we can move on to the next chapter in which we briefly talk about scripts and saving the environment. "],["scripts.html", "4 Scripts Save Source a script", " 4 Scripts Ok, let’s take a break before all the theoretical chapters to discuss about scripts. I always say this word when talking to you about my job, but what are they? A script is essentially an ordered list of commands, used to not have to write again and again the same commands on the console. It can contain everything you type in the console, like functions, operations and even comments; in this way, you can do an analysis and store it as a “text” file that you can use as reference (so you know what you have done), use for another analysis, edit, share with others… You will always write code in scripts, for all these reasons. Let’s see how to create a script, write some code in it and run part of the script or even a small part of it in RStudio. In the video we see a series of actions: To create a script, click the button on top left, then select “R Script” (or File -&gt; New File -&gt; R Script) Start writing the commands (even comments) To run a single line click “Run” To run the whole script (R starts from the beginning) click “Source”) Suggetion: Comment, comment, comment everything. I know it is time consuming, but you will be so happy and greatful to read comments that help you understand what you’ve done months (or weeks) before. Save To save a script “File -&gt; Save” or the usual shortcut “Ctrl-S” (Windows) or “Cmd-S” (MacOS). Use them for all the exercise from now on! Source a script Source a script from the console instead of having to open it and source from RStudio is very useful when you want to save time and create re-usable pipelines or analysis. Sourcing a script means to execute all the line of codes in that script. It can be archieved by doing source(\"path_to_file\"). Now, head to the next chapter in which we will talk about numbers. "],["numbers.html", "5 Numbers Operations Rounding Tranform to type number Exercises", " 5 Numbers I know you know what numbers are, and we’ve already seen that we have two types of numbers in R: integers and doubles; so, let’s move to see them in action. Operations First of all, here is how to do basic mathematical operation in R: # Plus, minus, multiply, divide 5 + 4 - 2 * 3 / 2 [1] 6 # Power 4 ** 3 [1] 64 # Logarithm log(100) # base e [1] 4.60517 log10(100) # base 10 [1] 2 log2(100) # base 2 [1] 6.643856 log(100, base = 3) # choose the base [1] 4.191807 # Natural exponential exp(2) [1] 7.389056 # Square root sqrt(9) [1] 3 An interesting operator is the modulus (%%) which returns the remainder of a division, for example: 7 %% 3 [1] 1 This can be useful to evaluate if a number is even or odd by calculating the remainder of the division x / 2 (so using x %% 2): if it is 0, the number x is even, otherwise it is odd. 11 %% 2 [1] 1 12 %% 2 [1] 0 Rounding Another thing that we usually want to do is to round decimal number, especially after log transformation or division. To do so, we have 3 functions: # Round to n decimal places round(x = 1/3, digits = 2) [1] 0.33 # Round to upper integer ceiling(10.2) [1] 11 # Round to lower integer floor(14.9) [1] 14 Look how ceiling and floor do not take into account the decimal part, even if it is greater or lower than 0.5. Tranform to type number Sometimes you want to transform a string that contains a number to a numeric type in R. I know we haven’t covered strings yet (next chapter will be on them), but let’s do a bit step forward now just to see this super useful function, that we use a lot when dealing with dataframes. To do so, we’ll use the function called as.numeric() mystring &lt;- &quot;15&quot; # This is a character, can you guess why R interpret it as a character? typeof(mystring) [1] &quot;character&quot; mynumber &lt;- as.numeric(mystring) typeof(mynumber) [1] &quot;double&quot; Wow, you will find this super super super useful. Exercises Let’s now put in practice what we have seen in this chapter and in the previous (remember? the script… I want you to write a script with these exercises and save it) Exercise 5.1 The results of a Real-Time PCR indicate that your triplicates for FOXP1 have these Ct: 22.4, 22.31, 22.24. Calculate the mean value and print it rounded to 2 decimal places. Solution # calculator solution mean_result_calc &lt;- (22.4 + 22.31 + 22.24) / 3 mean_result_calc &lt;- round(mean_result_calc, digits = 2) print(mean_result_calc) [1] 22.32 # BETTER solution rep1 &lt;- 22.4 rep2 &lt;- 22.31 rep3 &lt;- 22.24 n_rep &lt;- 3 mean_res_better &lt;- (rep1 + rep2 + rep3) / n_rep mean_res_better_round &lt;- round(mean_res_better, digits = 2) print(mean_res_better_round) [1] 22.32 The second solution is better because every number is stored in a variable, that you then use to calculate the mean value. Exercise 5.2 Now calculate the sd of the data of exercise 5.1 and print the value rounded to upper integer, to lower integer and to a 4-digit decimal. Solution # Use only better solution, first calculate the variance var_calc &lt;- ((rep1 - mean_res_better)^2 + (rep2 - mean_res_better)^2 + (rep3 - mean_res_better)^2) / (n_rep - 1) # Now let&#39;s calculate sd sd_calc &lt;- sqrt(var_calc) sd_calc_ceil &lt;- ceiling(sd_calc) print(sd_calc_ceil) [1] 1 sd_calc_floor &lt;- floor(sd_calc) print(sd_calc_floor) [1] 0 sd_calc_round &lt;- round(sd_calc, digits = 4) print(sd_calc_round) [1] 0.0802 Ok, now you’re ready to learn about strings, let’s go. "],["character.html", "6 Character Concatenate strings Substring Substitution Grep Transform to type character Exercises", " 6 Character When you analyze a dataset, you don’t have only numbers: you’ll have gene names, protein names, mouse strains and other variables that R calls character (I will alsways call them strings, but remember that for R they are character). A character can be a single letter, a word or even a whole text. To create a character variable you have to include it in \"\" (double quotes) or in ''(single quotes): mychar_d &lt;- &quot;SEC24C&quot; typeof(mychar_d) [1] &quot;character&quot; mychar_s &lt;- &#39;SEC24C&#39; typeof(mychar_s) [1] &quot;character&quot; Even numbers can be considered as character if included by ““: weight_n &lt;- 12 typeof(weight_n) [1] &quot;double&quot; weight_c &lt;- &quot;12&quot; typeof(weight_c) [1] &quot;character&quot; See? Just adding the double/single quotes it changes everything. IMPORTANT: R interprets everything that is between a pair of single/double quotes as character, so if you forget to close a quote, nothing will work. Moreover, you can’t use a single quote to close a character opened with a double quote and vice versa. Concatenate strings Sometimes you want to concatenate different string into one single string, and we can to it with two similar functions: paste() and paste0(). The unique difference among them is that in the former you can decide what character to use to separate what you are concatenating (default is a white space), while the latter do not insert any character. For example, let’s say you have a variable condition and a variable treatment, and you want to concatenate them to create the variable sample; you will do: condition &lt;- &quot;control&quot; treatment &lt;- &quot;vector&quot; sample &lt;- paste(condition, treatment, sep = &quot;.&quot;) # default is &quot; &quot; print(sample) [1] &quot;control.vector&quot; sample0 &lt;- paste0(condition, treatment) print(sample0) [1] &quot;controlvector&quot; You concatenate as many character as you want, just put them all inside that function. Substring I have to tell you about substring, but I never used this function in my life. It is used to slice the character and take only a part of it. The function is called substr(), let’s see how it works: substr(mychar_s, start = 2, stop = 4) [1] &quot;EC2&quot; It needs a start and a stop value, they are both included in the result (in this case, character at position 2, 3 and 4 are sliced). Remember: in R everything starts at 1, so the first element is at position 1. In other languages it starts from 0, but in R it starts from 1. Extra funtcion never used but that can be important if we use substr and we don’t know how long is a character is nchar() nchar(mychar_s) [1] 6 Let’s say we want to take from position 3 until the end, but we don’t know how long is a character, we can do it with: substr(mychar_s, start = 3, stop = nchar(mychar_s)) [1] &quot;C24C&quot; What happened here is that the result of the function nchar(mychar_s) is used as the value to indicate the stop. We will usually use these method in R, especially when we don’t want to use memory to store a value that is used only once (as in this case). Substitution Alright, let’s move to something way more useful for our analysis: the function sub(), and its big brother gsub(). They are used to substitute part of a character with another, the only difference is that the former changes only the first occurrence, while the latter every occurrence. Let’s say we have the sample variable written as \"control_vector_3\" and we want to get rid of the underscores, we will do: sample2 &lt;- &quot;control_variable_2&quot; sub_only &lt;- sub(pattern = &quot;_&quot;, # the part of the string to search to substitute replacement = &quot; &quot;, # what to use to replace it x = sample2) # variable in which to search print(sub_only) [1] &quot;control variable_2&quot; gsub_all &lt;- gsub(pattern = &quot;_&quot;, # the part of the string to search to substitute replacement = &quot; &quot;, # what to use to replace it x = sample2) # variable in which to search print(gsub_all) [1] &quot;control variable 2&quot; This is the basic way of using these functions, but they can be very useful in complex analysis, but we will see them later on. Grep Further parents of substitution, are grep() and its brother grepl(): they are used to check if a particular pattern is present in a character variable. The first one returns the index (we’ll see this concept in few chapters) or the value of the variable that match the pattern, the second one returns a boolean value (TRUE or FALSE) indicatung the presence of the pattern in the variable. Let’s see few example right away: gene_to_test &lt;- &quot;GAPDH&quot; pattern_to_check_1 &lt;- &quot;GA&quot; pattern_to_check_2 &lt;- &quot;PH&quot; grep_1 &lt;- grep(pattern = pattern_to_check_1, x = gene_to_test, value = T) # default is FALSE (returns index) print(grep_1) [1] &quot;GAPDH&quot; grep_2 &lt;- grep(pattern = pattern_to_check_2, x = gene_to_test, value = T) # default is FALSE (returns index) print(grep_2) character(0) grepl_1 &lt;- grepl(pattern = pattern_to_check_1, x = gene_to_test) print(grepl_1) [1] TRUE grepl_2 &lt;- grepl(pattern = pattern_to_check_2, x = gene_to_test) print(grepl_2) [1] FALSE We can see that the grep_2 gives character(0) as result, meaning that it is an empty character variable. You are going to use grep a lot during the analysis, even if you find it not so interesting now, trust me 😉. Transform to type character As for numbers, we can also convert a variable into a string: we use the function as.character(). You will use this function when a column of a dataframe is read as numeric while you want it to be read as character instead. ml_to_add &lt;- 35 typeof(ml_to_add) [1] &quot;double&quot; ml_to_add &lt;- as.character(ml_to_add) typeof(ml_to_add) [1] &quot;character&quot; This is an important lesson: in R variables can be overwritten with other types of data (this can’t be done in other languages such as Java, C++, ecc.). This can be both handy and risky at the same time: handy because we can save memory by overwriting useless variables, risky because we can overwrite a variable without checking if the type is maintained (maybe it is important). Exercises Exercise 5.2 In a list of genes to test, you found a gene called “NRG_1” and one called “SST R”. In the report you have to present you want to print out “Involved genes are NRG1 and SSTR2”. How to do it? Solution gene1 &lt;- &quot;NRG_1&quot; gene2 &lt;- &quot;SST R&quot; # correct gene names gene1 &lt;- gsub(pattern = &quot;_&quot;, replacement = &quot;&quot;, gene1) gene2 &lt;- gsub(pattern = &quot; R&quot;, replacement = &quot; R2&quot;, gene1) # concatenate all the string all_string &lt;- paste(&quot;Involved genes are&quot;, gene1, &quot;and&quot;, gene2) print(all_string) [1] &quot;Involved genes are NRG1 and NRG1&quot; Exercise 5.2 In a variable you have the gene name “HCN1” and in another you have its number of aa (890, as numeric!!!). Print out the string “HCN1 protein is 890 aa long” Solution gene &lt;- &quot;HCN1&quot; aa_num &lt;- 890 # one string solution to_print &lt;- paste(gene, &quot;protein is&quot;, as.character(aa_num), &quot;aa long&quot;) print(to_print) [1] &quot;HCN1 protein is 890 aa long&quot; Don’t worry if you had done it in another way or if it didn’t work. We are here to learn, and these exercises are done to challenge you on things you have seen in different pieces. Head on to the next lesson, in which we are going to talk about booleans. "],["boolean.html", "7 Boolean Boolean as results of comparison Logical operator Exercises", " 7 Boolean We finally arrived to the last data type that needs a deeper explanation: the boolean (or logical). In programming languages, there are a particular type of data (the boolean) representing what we can imagine as true or false, in R they are represented by two values: TRUE (or T) and FALSE (or F). We can see an example here: t_value &lt;- TRUE f_value &lt;- FALSE typeof(t_value) [1] &quot;logical&quot; typeof(f_value) [1] &quot;logical&quot; R calls them logical (as in computer science). They cannot be explained well if not contextualized, so let’s see some basic practical application here, and be patient, in next lessons we will see another examples. Boolean as results of comparison The most used way to get a logical is to evaluate a comparison, such as compare numbers, compare words ecc. Quickly, for numbers: num1 &lt;- 3 num2 &lt;- 4 # greater than num1 &gt; num2 [1] FALSE # greater equal than num1 &gt;= num2 [1] FALSE # less than num1 &lt; num2 [1] TRUE # less equal than num1 &lt;= num2 [1] TRUE # equality num1 == num2 [1] FALSE # not equal to num1 != num2 [1] TRUE IMPORTANT: I hope you notice that we used == to identity comparison. And I hope you get why we didn’t use only =. If you don’t, remember that one equal sign assign a value to a variable, so in this case you would have overwritten num1 with the value of num2. And what about character? They behave in this way: # define some variables ch1 &lt;- &quot;Mapk13&quot; ch2 &lt;- &quot;MAPK13&quot; ch3 &lt;- &quot;Xist&quot; # Greater than ch1 &gt; ch2 [1] FALSE ch3 &gt; ch1 [1] TRUE &lt; and &gt; with character, contrary to popular belief, do not take into account the number of characters of the string, but the comparison is based on alphabetical order, with lowercase letters that come prior uppercase ones (that’s why Mapk13 is not greater than MAPK13 and Xist). For this reason, two characters are equal only if they have the same letter/number/special character, in the same order and in the same case. For example: ch4 &lt;- &quot;Peg3&quot; ch5 &lt;- &quot;Peg3&quot; ch6 &lt;- &quot;peg3&quot; ch4 == ch5 [1] TRUE ch5 == ch6 [1] FALSE Logical operator Up to now, we have seen logical as a result of comparisons, but what if we want to compare or combine comparisons? I know it sounds silly, but here is an example of implementation of this concept. We will have to do with dataframes, vectors, matrix and other stuff, and we will always filter for some conditions: let’s say that we want to extrapolate data that are below 10 but above 5. These are two comparisons: x &lt; 10 and x &gt; 5. Here we combine two logicals, derived from the two comparisons. The main logical operators, the one that will be useful for us, are AND, OR and NOT AND The AND operator works as follows: TRUE and TRUE = TRUE TRUE and FALSE = FALSE FALSE and TRUE = FALSE FALSE and FALSE = TRUE An easy trick to remember is: if they are identical (both FALSE or TRUE), the result is TRUE, otherwise is FALSE. In R, AND operator is the &amp;, some examples: expr &lt;- 50 (expr &lt; 60) &amp; (expr &gt; 40) # TRUE &amp; TRUE [1] TRUE (expr &lt; 60) &amp; (expr &lt; 40) # TRUE &amp; FALSE [1] FALSE OR The OR operator works as follows: TRUE and TRUE = TRUE TRUE and FALSE = TRUE FALSE and TRUE = TRUE FALSE and FALSE = FALSE An easy trick to remember is: if at least one is TRUE, then the result is TRUE, otherwise if are all FALSE, the result is FALSE. In R, AND operator is the |, some examples: expr &lt;- 50 (expr &lt; 60) | (expr &gt; 40) # TRUE | TRUE [1] TRUE (expr &lt; 60)| (expr &lt; 40) # TRUE | FALSE [1] TRUE NOT The not operator is used to negate an expression, we have seen an example before, when we compared to numbers to see if they were not equal (!=). It is used before the expression to evaluate, in this form: expr &lt;- 50 !(expr &lt; 60) | (expr &lt; 40) # NOT TRUE | FALSE [1] FALSE !((expr &lt; 60) &amp; (expr &lt; 40)) # NOT (TRUE &amp; FALSE) [1] TRUE Here we see two important things: The not operator must be put before a parenthesis (if it contains a comparison) or directly before a TRUE or FALSE variable As for mathematical expressions, order and parenthesis matters: parenthesis and then from left to right Exercises Write a R script with the following exercises, they are level pro (I know you can): Exercise 7.1 Write the expression you would use to evaluate the following statement: we want to see if the patient is in his childhood (2-8 years) and one of its weight is less than 45 kg (as threshold variable) or if its mother has diabetes (we know it is true), and if its nationality is not USA. Tip: here we have 8 variables. I know I didn’t give neither the age nor the weight nor the nationality; you can create these variables and give the values you want. This exercise is to practice the writing and logical part. Solution # create patient variables patient_age &lt;- 5 patient_weight &lt;- 66 mother_diabetes &lt;- TRUE patient_state &lt;- &quot;Italy&quot; # set thresholds and values age_inf_threshold &lt;- 2 age_sup_threshold &lt;- 8 weight_sup_threshold &lt;- 45 nationality &lt;- &quot;USA&quot; ((patient_age &gt; age_inf_threshold &amp; patient_age &lt; age_sup_threshold) | (patient_weight &lt; weight_sup_threshold | mother_diabetes)) &amp; (patient_state != nationality) [1] TRUE It is best practice to use more parenthesis to help the readability by both human and R Ok, next chapter will be on vectors, and we will do another big step towards practical applications and exercise, with real biological questions. "],["vectors.html", "8 Vectors Named vectors Indexing One function can be applied to all elements Functions specific of vectors Operations between vectors Exercises", " 8 Vectors I know that in the previous chapters you were thinking “ok, but I rarely have one data for a variable, I usually have multiple data”, and you are right, so let’s see the first form of data organization in R, the base of all: the vector. A vector is a collection of data of the same type, for example all the weights of a group of people, all the names of your genes of interest, the expression levels of your genes of interest. To create a vector in R is simple, just use the function c() and put inside every data you need: heights &lt;- c(160, 148, 158, 170) genes &lt;- c(&quot;Adcyp1&quot;, &quot;Tle4&quot;, &quot;Psd95&quot;, &quot;Bip&quot;, &quot;Sst&quot;) heights [1] 160 148 158 170 genes [1] &quot;Adcyp1&quot; &quot;Tle4&quot; &quot;Psd95&quot; &quot;Bip&quot; &quot;Sst&quot; I told you that the data inside of a vector must be of the same type, in fact my_info &lt;- c(14, &quot;Most&quot;, 45, 5, TRUE) my_info [1] &quot;14&quot; &quot;Most&quot; &quot;45&quot; &quot;5&quot; &quot;TRUE&quot; Transforms everything into strings because we have a string in it. To confirm it, we can ask R to tell us the type of data we have in a vector by using the function typeof(): typeof(heights) [1] &quot;double&quot; typeof(my_info) [1] &quot;character&quot; Named vectors There is a particular type of vectors called named vectors that come in handy especially when creating graphs: every value in the vector has a “name” associated to it. Imagine like giving a unique name-tag to each value; for example, associate an expression value to each gene. There are 3 ways of creating a named vector, I will show you here from the most fast to the most complex: # 1st method (the best) # create gene and value vector first genes &lt;- c(&quot;Adcyp1&quot;, &quot;Tle4&quot;, &quot;Psd95&quot;, &quot;Bip&quot;, &quot;Sst&quot;) expr_values &lt;- c(12, 200, 40, 1, 129) # assign names to the vector names(expr_values) &lt;- genes expr_values Adcyp1 Tle4 Psd95 Bip Sst 12 200 40 1 129 You can see here that every expression value has its own name. # 2nd method (as good as the first) # create gene and value vector first genes &lt;- c(&quot;Adcyp1&quot;, &quot;Tle4&quot;, &quot;Psd95&quot;, &quot;Bip&quot;, &quot;Sst&quot;) expr_values &lt;- c(12, 200, 40, 1, 129) # create a structure expr_values &lt;- structure(genes, names = expr_values) expr_values 12 200 40 1 129 &quot;Adcyp1&quot; &quot;Tle4&quot; &quot;Psd95&quot; &quot;Bip&quot; &quot;Sst&quot; This is the preferred method when the values are not in a standalone vectors but, for example, are a column of a dataframe. # 3rd method, the worst # directly create the named vector expr_values &lt;- c(&quot;Adcyp1&quot; = 12, &quot;Tle4&quot; = 200, &quot;Psd95&quot; = 40, &quot;Bip&quot; = 1, &quot;Sst&quot; = 129) expr_values Adcyp1 Tle4 Psd95 Bip Sst 12 200 40 1 129 This takes so long to write and it is never used, as you will always have the values and the names as columns of a dataframe or individual vectors already defined or obtained through a function. But, what is the main advantage of using named vectors? The possibility of extracting values of interest, this is called indexing. Indexing Indexing is one of the most used features, if not the used one, to retrieve data from vector, matrix, dataframes, ecc. There are many ways, let’s start with the named vectors and then move on with other strategies. But first, a tip: the key element in indexing is a pair of squared bracket [], in which you specify what to retrieve. So, remember: parenthesis after a function, square brackets to index. Named vectors To extract values from a named vector, we can put inside the square brackets a character (even a character vector or a character variable) with the name of the value we want to extract: # one value expr_values[&quot;Tle4&quot;] Tle4 200 # a vector expr_values[c(&quot;Tle4&quot;, &quot;Psd95&quot;)] Tle4 Psd95 200 40 # a variable to_extract &lt;- &quot;Bip&quot; expr_values[to_extract] Bip 1 Slicing Another method is to specify the position of the values we want to extract. First, there are two things to keep in mind: In R numeration of index starts at 1, so the first element is at position 1, the second 2 ecc (in other programming language it starts at 0) The length of a vector, meaning the number of items it is composed by can be extrapolate using the function length() Having set these concepts, let’s do some examples (I know it can be boring, but these are the fundamentals of data analysis. you really thank me in the future). # get the length of a vector print(length(expr_values)) [1] 5 Now we know that our expression values vector contains 5 elements, we can now start to index it: # get first element expr_values[1] Adcyp1 12 # get first and third element expr_values[c(1, 3)] Adcyp1 Psd95 12 40 # get from element 2 to 4 expr_values[2:4] Tle4 Psd95 Bip 200 40 1 # get from element 3 to the end expr_values[3:length(expr_values)] Psd95 Bip Sst 40 1 129 # get every element but the third expr_values[-3] Adcyp1 Tle4 Bip Sst 12 200 1 129 Ok, now that we have seen some example, we can look at some of them in more details: expr_values[2:4]: we haven’t seen this yes, but the expression &lt;value1&gt;:&lt;value2&gt; creates a vector with numbers from value1 to value2 expr_values[3:length(expr_values)]: since the function length() returns a value, we can use this function directly into the square brackets expr_values[-3]: the minus indicates except Using logicals We can also use logical and boolean values to index a vector. This is one of the most used way, and you will use it quite a lot. Why? Let’s see it in action. expr_values[c(T, F, F, T, T)] Adcyp1 Bip Sst 12 1 129 What has happened? When indexed with boolean, only the values in which is TRUE (T) are returned, and this is super cool. Do you remember in the previous chapter how we get boolean as results from an expression?! Great, so we can use expressions that returns TRUE or FALSE and use them to index a vector: # retrieve values &lt; 59 expr_values[expr_values &lt; 59] Adcyp1 Psd95 Bip 12 40 1 We can use also a more complicated expression: # retrieve values &lt; 30 or &gt; 150 expr_values[(expr_values &lt; 30) | (expr_values &gt; 150)] Adcyp1 Tle4 Bip 12 200 1 Do you see how useful it could be in an analysis? I’m sure you do, so let’s move on! One function can be applied to all elements We’ve just seen a feature of the vectors: we can apply a function to each element of the vector. Previously we have evaluated if each element of the vector was &lt; 59 (or &lt; 30 or &gt; 150). Now, we will see more examples, starting from numeric vectors. # operations can be performed to each value expr_values * 2 Adcyp1 Tle4 Psd95 Bip Sst 24 400 80 2 258 expr_values / 10 Adcyp1 Tle4 Psd95 Bip Sst 1.2 20.0 4.0 0.1 12.9 # tranform a numeric vector to a character one as.character(expr_values) [1] &quot;12&quot; &quot;200&quot; &quot;40&quot; &quot;1&quot; &quot;129&quot; With character vectors we can do: # calculate number of characters nchar(genes) [1] 6 4 5 3 3 # use grep to see which genes start with letter T grep(pattern = &quot;^T&quot;, x = genes, value = T) # ^ indicates the start of the line, can you guess why we used it? [1] &quot;Tle4&quot; Functions specific of vectors Up to now nothing new, we have not seen any new function. But now we will see some new functions specific for vectors, starting, as always, from numbers: Example 8.1 Let’s say we have a mice and we want to test the time spent in a cage, in particular we want to calculate the sum, the mean and the sd of the time spent not in the center of the cage. # create the named vector areas &lt;- c(&quot;center&quot;, &quot;top&quot;, &quot;right&quot;, &quot;bottom&quot;, &quot;left&quot;) time &lt;- c(14, 22, 29, 12, 2) names(time) &lt;- areas # extrapolate data not in center not_center &lt;- time[-(names(time) == &quot;center&quot;)] # calculate mean, sum and sd sum_time &lt;- sum(not_center) mean_time &lt;- mean(not_center) sd_time &lt;- sd(not_center) # print results print(paste(&quot;The mice spent&quot;, sum_time, &quot;seconds not in the center of the cage, with a mean of&quot;, mean_time, &quot;seconds in each area and a sd of&quot;, sd_time)) [1] &quot;The mice spent 65 seconds not in the center of the cage, with a mean of 16.25 seconds in each area and a sd of 11.7862914721581&quot; This example implemented lots of things we have seen up to now, and it shows how on numerical vectors we can calculate sum, mean and sd; but these are not the only functions, we have also var (variance), min, max and others. We are going to see them later when needed. Sorting a vector Another important function is sort() as it gives us the possibility to sort the values of the vectors. sort(expr_values) Bip Adcyp1 Psd95 Sst Tle4 1 12 40 129 200 sort(expr_values, decreasing = T) Tle4 Sst Psd95 Adcyp1 Bip 200 129 40 12 1 By default, it sorts in ascending order, we can change the behavior by setting decreasing = T. Let’s see a couple of trick with sorting: features &lt;- paste0(&quot;gene&quot;, 1:20) features [1] &quot;gene1&quot; &quot;gene2&quot; &quot;gene3&quot; &quot;gene4&quot; &quot;gene5&quot; &quot;gene6&quot; &quot;gene7&quot; &quot;gene8&quot; &quot;gene9&quot; &quot;gene10&quot; &quot;gene11&quot; &quot;gene12&quot; &quot;gene13&quot; &quot;gene14&quot; &quot;gene15&quot; [16] &quot;gene16&quot; &quot;gene17&quot; &quot;gene18&quot; &quot;gene19&quot; &quot;gene20&quot; sort(features) [1] &quot;gene1&quot; &quot;gene10&quot; &quot;gene11&quot; &quot;gene12&quot; &quot;gene13&quot; &quot;gene14&quot; &quot;gene15&quot; &quot;gene16&quot; &quot;gene17&quot; &quot;gene18&quot; &quot;gene19&quot; &quot;gene2&quot; &quot;gene20&quot; &quot;gene3&quot; &quot;gene4&quot; [16] &quot;gene5&quot; &quot;gene6&quot; &quot;gene7&quot; &quot;gene8&quot; &quot;gene9&quot; What can we see here? First of all, a cool method to create a vector of words with increasing numbers (the combination paste and 1:20); then, we see that sorting has put “gene2” after all “gene1X”, because it sorts in alphabetical order. For this reason, it is recommended to use 01, 02, 03 ecc if we know that we have more than 9 elements (this works also for computer file names). ::: {.example #sort-names} Here we want to sort the expression levels based on their names. ::: expr_values[sort(names(expr_values))] Adcyp1 Bip Psd95 Sst Tle4 12 1 40 129 200 Tadaaa, we used sort on the names of expression levels and used the sorted names to index the named vector. Unique values As the title suggests, there is a function (unique()) that returns tha unique values of a vector. It is useful in different situations, we will use it a lot. The usage is so simple: # create a vector with repeated values my_vector &lt;- c(1:10, 2:4, 3:6) # can you guess the values of this vector without typing it in R? unique(my_vector) [1] 1 2 3 4 5 6 7 8 9 10 Logical vectors sum and mean In the example 8.1 we have seen how to calculate the sum and the mean of numerical vectors, but it can be done also on vectors full of boolean, and it can be very useful. I’ll show you this example: Example 8.2 We have a vector representing the response to a treatment of different patient, the vector is coded by logicals. Here is the vector: c(T, F, T, T, T, F, T, F, F, T, F, F, F, F, F, T, T). Calculate the number and the percentage of responders (2 decimal places). # 1. Create the vector response &lt;- c(T, F, T, T, T, F, T, F, F, T, F, F, F, F, F, T, T) # 2. Calculate the number of responders n_responders &lt;- sum(response) # 3. Calculate the percentage of responders p_responders &lt;- mean(response) * 100 p_responders &lt;- round(p_responders, 2) print(paste(&quot;There are&quot;, n_responders, &quot;responders, corresponding to&quot;, p_responders, &quot;% of total patients.&quot;)) [1] &quot;There are 8 responders, corresponding to 47.06 % of total patients.&quot; What happened here? The trick is that R interprets TRUE as 1 and FALSE as 0. Remember this also for future applications. Operations between vectors Don’t give up, I know this chapter ha been so long, but now we will see the last part: the most important operations we can do between vectors. Mathematical First of all, mathematical operations: we can do mathematical operations between vectors only if the vectors are the same size, otherwise it will raise an error. This because each operation is performed one element by the corrisponding element of the other vector. Example 8.3 Let’s say we have 3 vectors representing the total amount of aminoacids found in three different samples for 5 proteins. We want to calculate, for each protein, the fraction of aminoacids in each sample. # 1. Define starting vectors proteins &lt;- c(&quot;SEC24C&quot;, &quot;BIP&quot;, &quot;CD4&quot;, &quot;RSPO2&quot;, &quot;LDB2&quot;) sample1 &lt;- c(12, 52, 14, 33, 22) sample2 &lt;- c(5, 69, 26, 45, 3) sample3 &lt;- c(8, 20, 5, 39, 48) names(sample1) &lt;- names(sample2) &lt;- names(sample3) &lt;- proteins # 2. Calculate sum of aa for each protein sum_aa &lt;- sample1 + sample2 + sample3 # 3. Calculate the fraction for each sample sample1_fr &lt;- sample1 / sum_aa * 100 sample2_fr &lt;- sample2 / sum_aa * 100 sample3_fr &lt;- sample3 / sum_aa * 100 # 4. Print the results sample1_fr SEC24C BIP CD4 RSPO2 LDB2 48.00000 36.87943 31.11111 28.20513 30.13699 sample2_fr SEC24C BIP CD4 RSPO2 LDB2 20.000000 48.936170 57.777778 38.461538 4.109589 sample3_fr SEC24C BIP CD4 RSPO2 LDB2 32.00000 14.18440 11.11111 33.33333 65.75342 Ok, I know it seems difficult, but let’s analyze each step: Here the new step is that we can assign the same values to multiple variables by chaining assignment statements Since the vectors have the same size, we can sum them together. IMPORTANT: the operation is performed based on position, NOT names. So if our vectors would have had the names in different order, we should have ordered them Different and common elements Usually we want to compare two vectors to find distinct and common elements (eg. upregulated genes in two analysis). To do it, we can use two functions: intersect() (which find the common elements between two vectors), and setdiff() (which returns the element in the first vector not present in the second). # 1. Define 2 vectors upregulated_1 &lt;- c(&quot;NCOA1&quot;, &quot;CENPO&quot;, &quot;ASXL2&quot;, &quot;HADHA&quot;, &quot;ADGRF3&quot;) upregulated_2 &lt;- c(&quot;ADGRF3&quot;, &quot;SLC5A6&quot;, &quot;NRBP1&quot;, &quot;NCOA1&quot;, &quot;HADHA&quot;) # 2. Find common genes common &lt;- intersect(upregulated_1, upregulated_2) # 3. Find different genes only_1 &lt;- setdiff(upregulated_1, upregulated_2) only_2 &lt;- setdiff(upregulated_2, upregulated_1) # 4. Print results print(cat(&quot;Common genes are:&quot;, paste(common, collapse = &quot;, &quot;), &quot;\\n&quot;, &quot;Genes specifically upregulated in analysis 1 are:&quot;, paste(only_1, collapse = &quot;, &quot;), &quot;\\n&quot;, &quot;Genes specifically upregulated in analysis 2 are:&quot;, paste(only_2, collapse = &quot;, &quot;), &quot;\\n&quot;) ) Common genes are: NCOA1, HADHA, ADGRF3 Genes specifically upregulated in analysis 1 are: CENPO, ASXL2 Genes specifically upregulated in analysis 2 are: SLC5A6, NRBP1 NULL Here you are. We can add three more notions: cat() is like print, but it accept special characters when pasting a vector, an additional argument collapse = \"&lt;chr&gt;\" can be added. It tells R to collapse all the element of a vector in a single character element and separate them through (“,” for us) \"\\n\" means add a new line, so it tells to print the next sentence in a new line. It is a special character, so it works with cat/li&gt; %in% A slightly different function (if we can call it this way) is %in%. When comparing two vectors, it returns TRUE or FALSE for each element of the first vector based on the presence of that element in the second vector: upregulated_1 %in% upregulated_2 [1] TRUE FALSE FALSE TRUE TRUE Sometimes it is useful to index a vector based on another vector. We will see some usages. Match Last but not least, the match() function. It takes two vectors into consideration and returns, for each element of the first vector, the position of that element in the second vector. If an element is not present, it will return NA, we will describe this element in a dedicated chapter. So, how can it be useful? Usually it is done to rearrange and reorder a vector to match another vector. For example, let’s say that two vectors of example 8.3 have names in different order; prior to do all calculation we need to match the names order. # 1. Define starting vectors proteins1 &lt;- c(&quot;SEC24C&quot;, &quot;BIP&quot;, &quot;CD4&quot;, &quot;RSPO2&quot;, &quot;LDB2&quot;) proteins2 &lt;- c(&quot;CD4&quot;, &quot;RSPO2&quot;, &quot;BIP&quot;, &quot;LDB2&quot;, &quot;SEC24C&quot;) sample1 &lt;- c(12, 52, 14, 33, 22) sample2 &lt;- c(5, 69, 26, 45, 3) names(sample1) &lt;- proteins1 names(sample2) &lt;- proteins2 sample1 SEC24C BIP CD4 RSPO2 LDB2 12 52 14 33 22 sample2 CD4 RSPO2 BIP LDB2 SEC24C 5 69 26 45 3 As we can see, the names are in different order, so we want to fix this: idx &lt;- match(names(sample1), names(sample2)) idx [1] 5 3 1 2 4 We can use these indexes to index our sample2. sample2 &lt;- sample2[idx] sample1 SEC24C BIP CD4 RSPO2 LDB2 12 52 14 33 22 sample2 SEC24C BIP CD4 RSPO2 LDB2 3 26 5 69 45 Now they are in the same order, so we can continue the analysis. Exercises Great, let’s do some exercises. They wrap up lots of concept we’ve just seen. However, I encourage you to try again every function we have studied so far. It doesn’t matter if you will do them in a different way, as long as the results are identical. In these chapters I want you to understand the steps, not to use the perfect and most efficient code. Exercise 8.1 We have received the data of the expression levels (in reads) of some genes of interest. We are interested in the difference between expression levels of mitochondrial vs non-mitochondrial genes; in particular we want to see how many reads maps to those categories (both counts and percentage). The starting vector is the following: c(“SEC24C” = 52, “MT-ATP8” = 14, “LDB2” = 22, “MT-CO3” = 16, “MT-ND4” = 2, “NTMT1” = 33, “BIP” = 20, “MT-ND5” = 42) PS: Mitochondrial genes starts with MT-. Solution # 1. Create the vector expr_levels &lt;- c(&quot;SEC24C&quot; = 52, &quot;MT-ATP8&quot; = 14, &quot;LDB2&quot; = 22, &quot;MT-CO3&quot; = 16, &quot;MT-ND4&quot; = 2, &quot;NTMT1&quot; = 33, &quot;BIP&quot; = 20, &quot;MT-ND5&quot; = 42) # 2. Get names of mitochondrial genes mito_genes &lt;- grep(pattern = &quot;^MT-&quot;, x = names(expr_levels), value = T) # 3. Calculate total number of counts for each category total_mito &lt;- sum(expr_levels[mito_genes]) total_no_mito &lt;- sum(expr_levels[-(names(expr_levels) %in% (mito_genes))]) # 4. Calculate % perc_mito &lt;- round(total_mito / sum(expr_levels) * 100, 2) perc_no_mito &lt;- round(total_no_mito / sum(expr_levels) * 100, 2) # 5. Print results cat(&quot;Reads mapping to mitochondrial genes are&quot;, total_mito, &quot;(&quot;, perc_mito, &quot;%), while the ones mapping to other genes are&quot;, total_no_mito, &quot;(&quot;, perc_no_mito, &quot;%)&quot;) Reads mapping to mitochondrial genes are 74 ( 36.82 %), while the ones mapping to other genes are 149 ( 74.13 %) Exercise 8.2 You were given the mass spectrometry results of an analysis on 3 patients. These are the results: patient1 c(“SEC24C” = 12, “CDH7” = 1, “LDB2” = 13, “SEM3A” = 16, “FEZF2” = 21, “NTMT1” = 43, “BIP” = 29, “HOMER” = 22), patient2 c(“SEC24C” = 2, “CDH7” = 11, “SEM5A” = 13, “HCN1” = 22, “NTMT1” = 31, “BIP” = 12, “HOMER” = 8), patient3 c(“SEC24B” = 20, “BIP” = 12, “HOMER” = 13, “SEM3A” = 49, “HCN1” = 16, “NTMT1” = 27). Calculate the expression mean of common genes. Solution # 1. Create the vectors patient1 &lt;- c(&quot;SEC24C&quot; = 12, &quot;CDH7&quot; = 1, &quot;LDB2&quot; = 13, &quot;SEM3A&quot; = 16, &quot;FEZF2&quot; = 21, &quot;NTMT1&quot; = 43, &quot;BIP&quot; = 29, &quot;HOMER&quot; = 22) patient2 &lt;- c(&quot;SEC24C&quot; = 2, &quot;CDH7&quot; = 11, &quot;SEM5A&quot; = 13, &quot;HCN1&quot; = 22, &quot;NTMT1&quot; = 31, &quot;BIP&quot; = 12, &quot;HOMER&quot; = 8) patient3 &lt;- c(&quot;SEC24B&quot; = 20, &quot;BIP&quot; = 12, &quot;HOMER&quot; = 13, &quot;SEM3A&quot; = 49, &quot;HCN1&quot; = 16, &quot;NTMT1&quot; = 27) # 2. Identify common genes common1_2 &lt;- intersect(names(patient1), names(patient2)) common_all &lt;- intersect(common1_2, names(patient3)) # 3. Subset for common genes patien1_sub &lt;- patient1[common_all] patien2_sub &lt;- patient2[common_all] patien3_sub &lt;- patient3[common_all] # 4. Calculate the mean for each gene common_mean &lt;- (patien1_sub + patien2_sub + patien3_sub) / 3 common_mean NTMT1 BIP HOMER 33.66667 17.66667 14.33333 You can see how having the info for each patient in a different vector is not as handy, for this reason for expression data we use matrices. In the next chapter we will talk about them. "],["matrices.html", "9 Matrices Create a matrix Rownames and colnames Indexing Functions for all matrix Apply a function to all rows or columns Exercises", " 9 Matrices Here we are at the second basic form of data organization in R, and the most important one for expression data: the matrix. As we have seen in the previous chapter, sometimes, especially for expression data, there is the need of having a more complex data structure than the vector. Matrices are 2-dimensional data objects containing the same type of data: usually we have features (genes, proteins, ecc) on rows and samples on columns. Create a matrix There are many ways to create a matrix, we will briefly see most of them (the ones we are going to use in real life). The first one, that is not so used (I know I just told you the opposite, but…) is to change a vector into a matrix using the function matrix() and setting the number : # 1. create a vector my_vector &lt;- 1:12 my_vector [1] 1 2 3 4 5 6 7 8 9 10 11 12 # 2. create the matrix my_matrix &lt;- matrix(my_vector, nrow = 3) my_matrix [,1] [,2] [,3] [,4] [1,] 1 4 7 10 [2,] 2 5 8 11 [3,] 3 6 9 12 There are few things to notice here: We can set nrow or ncol If the length of the vector is not a multiple of nrow or ncol, it starts to repeat the vector from the beginning to fill the matrix (try using matrix(my_vector, nrow = 5)) It fills the matrix by column by default, we can change the behavior setting byrow = T, try it Binding Another method, usually used, is to “bind” two or more vectors to create a matrix through rbind() or cbind(). It is easier with an example. Do you remember in exercise 8.2 that we had three patients’ expression levels in three different vectors?! Now we can comine them into a matrix in this way: # 1. Create the vectors patient1 &lt;- c(&quot;SEC24C&quot; = 12, &quot;CDH7&quot; = 1, &quot;LDB2&quot; = 13, &quot;SEM3A&quot; = 16, &quot;FEZF2&quot; = 21, &quot;NTMT1&quot; = 43, &quot;BIP&quot; = 29, &quot;HOMER&quot; = 22) patient2 &lt;- c(&quot;SEC24C&quot; = 2, &quot;CDH7&quot; = 11, &quot;LDB2&quot; = 13, &quot;SEM3A&quot; = 22, &quot;FEZF2&quot; = 21, &quot;NTMT1&quot; = 31, &quot;BIP&quot; = 12, &quot;HOMER&quot; = 8) patient3 &lt;- c(&quot;SEC24C&quot; = 8, &quot;CDH7&quot; = 3, &quot;LDB2&quot; = 22, &quot;SEM3A&quot; = 14, &quot;FEZF2&quot; = 13, &quot;NTMT1&quot; = 45, &quot;BIP&quot; = 37, &quot;HOMER&quot; = 2) # 2. Bind vectors r_patients &lt;- rbind(patient1, patient2, patient3) c_patients &lt;- cbind(patient1, patient2, patient3) r_patients SEC24C CDH7 LDB2 SEM3A FEZF2 NTMT1 BIP HOMER patient1 12 1 13 16 21 43 29 22 patient2 2 11 13 22 21 31 12 8 patient3 8 3 22 14 13 45 37 2 c_patients patient1 patient2 patient3 SEC24C 12 2 8 CDH7 1 11 3 LDB2 13 13 22 SEM3A 16 22 14 FEZF2 21 21 13 NTMT1 43 31 45 BIP 29 12 37 HOMER 22 8 2 Wow, those matrices are really cool! Let’s analyze the code: First of all, we have modified the vectors to be the same size and with the same order for the genes. This is crucial, otherwise we will mess up/li&gt; What would have been messed up? The column names in the first matrix and the row names in the second matrix. We will see these two features in a while. Just keep in mind that when you have to combine different named vectors, they should be in the same order. Try it with vectors not in the same order and see rbind() combine by rows, putting each vector in a row, while cbind does the opposite Transform into a matrix One of the most used function to create a matrix is to transform a data.frame (next chapter) into a matrix using the function as.matrix(). Let’s use mtcars, a data.frame available in R, and transform it in a matrix: # 1. See class of mtcars class(mtcars) [1] &quot;data.frame&quot; # 2. Transform to a matrix mt_mat &lt;- as.matrix(mtcars) # 3. See class of new variable class(mt_mat) [1] &quot;matrix&quot; &quot;array&quot; Here we introduced the concept of class in R. This is not important for us at the moment, neither will be in the future. Just think this way: typeof() is for the type of data inside a variable while the class is the “type” of the structure of the variable. Ok, now that we’ve seen how to create a matrix, we have to dig into some important concepts. Rownames and colnames Matrices can have row names and column names (think as the extension of a named vector). We have already seen these features in [#Binding], and here we will see them in details. Let’s start by visualizing the first matrix we have created: my_matrix [,1] [,2] [,3] [,4] [1,] 1 4 7 10 [2,] 2 5 8 11 [3,] 3 6 9 12 We can extract row names and column names with rownames() and colnames() functions, respectively: rownames(my_matrix) NULL colnames(my_matrix) NULL They have not been set, as we can see by the fact that the output of these functions is NULL and that when we printed the matrix we had “[,1] [,2] [,3] [,4]”. Set and edit row and column names You have to think at row and column names as simple vectors, so we can create two vectors (on for rows and one for columns) and assign them to row and column names. Remember: they must be the same length as the rows and the columns. # 1. Create vectors my_row_names &lt;- c(&quot;First row&quot;, &quot;Second row&quot;, &quot;Third row&quot;) my_col_names &lt;- c(&quot;First column&quot;, &quot;Second column&quot;, &quot;Third column&quot;, &quot;Fourth column&quot;) # 2. Assign vectors to row and column names rownames(my_matrix) &lt;- my_row_names colnames(my_matrix) &lt;- my_col_names # 3. Print result my_matrix First column Second column Third column Fourth column First row 1 4 7 10 Second row 2 5 8 11 Third row 3 6 9 12 rownames(my_matrix) [1] &quot;First row&quot; &quot;Second row&quot; &quot;Third row&quot; colnames(my_matrix) [1] &quot;First column&quot; &quot;Second column&quot; &quot;Third column&quot; &quot;Fourth column&quot; Tadaaa. Now we have a more complete matrix. As row names and column names are vectors, you can easily change them all (or part of them). For example: # 1. Change third row names rownames(my_matrix)[3] &lt;- &quot;3rd row&quot; # 2. Print my_matrix First column Second column Third column Fourth column First row 1 4 7 10 Second row 2 5 8 11 3rd row 3 6 9 12 Indexing As for vectors, we can extract values of the matrix by indexing: we can get a single value, a vector of values and either smaller matrices. Slicing The first method is similar to vector slicing, the only exception here is that we have to set a value for the row/s and one for the column/s in the form [row/s, column/s]. Here some examples: # Get only a value, from second row and third column my_matrix[2, 3] [1] 8 # Get a vector of values, from first and third row and second column my_matrix[c(1, 3), 2] First row 3rd row 4 6 # Get a matrix, from second and third row and second and third column my_matrix[2:3, 2:3] Second column Third column Second row 5 8 3rd row 6 9 # Get ALL elements of a row (leave the column part empty) my_matrix[2:3,] First column Second column Third column Fourth column Second row 2 5 8 11 3rd row 3 6 9 12 You can use every slicing technique seen in slicing section of vectors. Using names If we have set rownames and/or column names, we can use them to index a matrix (similarly to named vectors), in the form [row/s, column/s]. # Get only a value, from second row and third column my_matrix[&quot;Second row&quot;, &quot;Third column&quot;] [1] 8 # Get a vector of values, from first and third row and second column my_matrix[c(&quot;First row&quot;, &quot;3rd row&quot;), &quot;Second column&quot;] First row 3rd row 4 6 # Get a matrix, from second and third row and second and third column my_matrix[c(&quot;Second row&quot;, &quot;3rd row&quot;), c(&quot;Second column&quot;, &quot;Third column&quot;)] Second column Third column Second row 5 8 3rd row 6 9 # Get ALL elements of a row (leave the column part empty) my_matrix[c(&quot;Second row&quot;, &quot;3rd row&quot;),] First column Second column Third column Fourth column Second row 2 5 8 11 3rd row 3 6 9 12 Here, you can’t use expansions (:) to select from row with name X to row with name X+3, it is only possible with numbers. In fact, if you remember, the command n:n+m create a vector of numbers from n to n + m. Try it! Using logicals Again, as for vectors we can use logicals to extrapolate values of a matrix. Let’s say we want to get the names of the rows in which the third column has a odd number, we can do as follow: # 1. Create a boolean vector is_odd &lt;- my_matrix[, &quot;Third column&quot;] %% 2 == 1 # 2. Slice the matrix based on the boolean vector sliced_odd &lt;- my_matrix[is_odd,] # 3. Get row names rownames(sliced_odd) [1] &quot;First row&quot; &quot;3rd row&quot; This will be so useful when talking about expression matrix (e.g. when we want to extrapolate genes that have tot expression in patient X or Y). Functions for all matrix Alright, it is time for some practical applications to explore fundamental matrix functions. Head/Tail The first functions are head() and tail(). Let’s say we receive an expression table but they didn’t tell us much about it; we can use these two functions to look up the first and the last rows respectively. Here is how to use them: # 1. Load data (first time we see it) expr_data &lt;- read.csv(file = &quot;data/All_counts.csv&quot;, # name of the file header = T # usually column names are in the first row ) # 2. Type of class(expr_data) [1] &quot;data.frame&quot; # 3. Head head(expr_data) X wt1 wt2 wt3 wt4 wt5 wt6 ko1 ko2 ko3 ko4 ko5 ko6 1 DDX11L1 4 1 2 1 1 1 0 6 3 1 0 2 2 WASH7P 421 46 342 345 192 18 233 217 125 313 321 726 3 MIR6859-3 0 0 0 0 0 0 0 0 0 0 0 0 4 MIR6859-2 0 0 0 0 0 0 0 0 0 0 0 0 5 MIR6859-1 0 0 0 0 0 0 0 0 0 0 0 0 6 MIR6859-4 0 0 0 0 0 0 0 0 0 0 0 0 Ok, this is a brief example in which we have loaded a data matrix with the function read.csv() (as we know that the file is a .csv, but there are plenty of functions for all different type of files). We then checked the class of the expr_data and we get data.frame; lastly we used head() to see the structure of the first rows and we can say that: Gene symbols are in a column We have 6 wt samples and 6 ko samples Probably these are row counts as we do not have decimal values We can edit the previous code to fix some issues we encounter # 1. Gene names as rownames expr_data &lt;- read.csv(file = &quot;data/All_counts.csv&quot;, header = T, row.names = 1 # first column ) # 2. Transform to matrix expr_data &lt;- as.matrix(expr_data) # Check class(expr_data) [1] &quot;matrix&quot; &quot;array&quot; head(expr_data, n = 10) # we can specify the number of rows we want wt1 wt2 wt3 wt4 wt5 wt6 ko1 ko2 ko3 ko4 ko5 ko6 DDX11L1 4 1 2 1 1 1 0 6 3 1 0 2 WASH7P 421 46 342 345 192 18 233 217 125 313 321 726 MIR6859-3 0 0 0 0 0 0 0 0 0 0 0 0 MIR6859-2 0 0 0 0 0 0 0 0 0 0 0 0 MIR6859-1 0 0 0 0 0 0 0 0 0 0 0 0 MIR6859-4 0 0 0 0 0 0 0 0 0 0 0 0 MIR1302-2 0 0 0 0 0 0 0 0 0 0 0 0 MIR1302-11 0 0 0 0 0 0 0 0 0 0 0 0 MIR1302-9 0 0 0 0 0 0 0 0 0 0 0 0 MIR1302-10 0 0 0 0 0 0 0 0 0 0 0 0 Ok, fine. We are ready to go and explore our first expression matrix. Dim, nrow, ncol Head and tail are great friends, but you always want to know the dimensions of the matrix. It can be done using dim() function, which returns the number of rows and columns (this order!), or nrow() and ncol(). # dim dim(expr_data) [1] 26475 12 # nrow nrow(expr_data) [1] 26475 # ncol ncol(expr_data) [1] 12 We see that our matrix has 26475 rows and 12 columns. Summary and transpose After having seen the basic structure of the first and last lines, the number of rows and columns, we usually want to have some info about the distribution of the genes, the counts ecc. Here comes the function summary(): summary(expr_data) wt1 wt2 wt3 wt4 wt5 wt6 ko1 Min. : 0.0 Min. : 0.0 Min. : 0.0 Min. : 0 Min. : 0.0 Min. : 0.0 Min. : 0.0 1st Qu.: 0.0 1st Qu.: 0.0 1st Qu.: 0.0 1st Qu.: 0 1st Qu.: 0.0 1st Qu.: 0.0 1st Qu.: 0.0 Median : 19.0 Median : 16.0 Median : 16.0 Median : 15 Median : 16.0 Median : 17.0 Median : 13.0 Mean : 411.4 Mean : 324.4 Mean : 326.7 Mean : 274 Mean : 317.3 Mean : 316.6 Mean : 250.1 3rd Qu.: 272.0 3rd Qu.: 214.0 3rd Qu.: 218.0 3rd Qu.: 186 3rd Qu.: 212.0 3rd Qu.: 224.0 3rd Qu.: 179.0 Max. :327719.0 Max. :536733.0 Max. :377069.0 Max. :90474 Max. :352034.0 Max. :209954.0 Max. :61650.0 ko2 ko3 ko4 ko5 ko6 Min. : 0.0 Min. : 0.0 Min. : 0.0 Min. : 0.0 Min. : 0.0 1st Qu.: 0.0 1st Qu.: 0.0 1st Qu.: 0.0 1st Qu.: 0.0 1st Qu.: 0.0 Median : 18.0 Median : 19.0 Median : 17.0 Median : 17.0 Median : 19.0 Mean : 378.2 Mean : 351.4 Mean : 373.8 Mean : 319.8 Mean : 423.4 3rd Qu.: 245.0 3rd Qu.: 246.0 3rd Qu.: 255.0 3rd Qu.: 233.0 3rd Qu.: 288.0 Max. :641616.0 Max. :497463.0 Max. :236803.0 Max. :62660.0 Max. :338679.0 For each column it returns some descriptive. But, ehi, on the columns we have the samples, we want this statistics for the genes, how can we do it? Here comes t() that transpose the matrix so that rows became columns and vice versa. expr_data_t &lt;- t(expr_data) expr_data_t[1:5, 1:8] DDX11L1 WASH7P MIR6859-3 MIR6859-2 MIR6859-1 MIR6859-4 MIR1302-2 MIR1302-11 wt1 4 421 0 0 0 0 0 0 wt2 1 46 0 0 0 0 0 0 wt3 2 342 0 0 0 0 0 0 wt4 1 345 0 0 0 0 0 0 wt5 1 192 0 0 0 0 0 0 Perfect, now we can do summary again (we do a subset of the data because we don’t want to do it for all genes, as it will be huge). set.seed(123) # 1. Get random numbers to select random genes r_numb &lt;- runif(n = 7, min = 1, max = ncol(expr_data_t)) # 2. Floor numbers to get integers r_numb &lt;- floor(r_numb) # 3. Get the summary of sliced expr_data_t summary(expr_data_t[, r_numb]) GPX2 BTN3A3 KRT17 USP17L2 PHF19 DBT PPM1B Min. :0.0000 Min. : 5.00 Min. :0.00 Min. :0.0 Min. : 10.0 Min. : 23.0 Min. : 73.0 1st Qu.:0.0000 1st Qu.: 15.00 1st Qu.:0.00 1st Qu.:0.0 1st Qu.: 20.0 1st Qu.: 415.2 1st Qu.: 392.5 Median :0.5000 Median : 24.00 Median :0.00 Median :0.0 Median : 97.0 Median : 753.0 Median : 562.0 Mean :0.5833 Mean : 35.67 Mean :0.25 Mean :0.5 Mean :112.2 Mean : 642.8 Mean : 632.7 3rd Qu.:1.0000 3rd Qu.: 32.50 3rd Qu.:0.00 3rd Qu.:1.0 3rd Qu.:168.5 3rd Qu.: 938.2 3rd Qu.: 838.0 Max. :2.0000 Max. :150.00 Max. :2.00 Max. :3.0 Max. :324.0 Max. :1107.0 Max. :1466.0 Here we have some interesting descriptive for each gene: we can see, for example, that DBT has more counts than GPX2, or that PPM1B has the higher Max. counts of all these 7 genes. There are two new functions here: set.seed and runif. Let’s start from the latter, it returns n random number uniformly distributed between min and max included. Do you understand why I used max = ncol(expr_data_t)? I’m sure you do. But to be sure that it is clear, I did it because I don’t want to hard code (insert the real number) of the number of columns of the expression matrix, because if I change matrix I have to change this number as well. So, I let R calculate it for me. As it is random, in order to let you have the same number as me, I set a seed. The theory behind “randomness” in computer science is complex, so I’m not going to deep it. If you want, there are plenty of resources on the internet on this topic. Here, just an example of the use of the seed. # 1. Two random vectors of 5 numbers without set.seed no_seed1 &lt;- runif(n = 5, min = 1, max = 20) no_seed2 &lt;- runif(n = 5, min = 1, max = 20) # 2. Two random vectors setting the seed set.seed(123) # here you can place any number, each generate a unique random series with_seed1 &lt;- runif(n = 5, min = 1, max = 20) set.seed(123) # here you can place any number, each generate a unique random series with_seed2 &lt;- runif(n = 5, min = 1, max = 20) print(no_seed1) [1] 17.955962 11.477265 9.675680 19.179834 9.613349 print(no_seed2) [1] 13.873842 11.880035 2.955569 18.096674 5.675667 print(with_seed1) [1] 6.463973 15.977798 8.770562 17.777331 18.868878 print(with_seed2) [1] 6.463973 15.977798 8.770562 17.777331 18.868878 Great! Remember, setting the seed is fundamental in analysis in which randomness take place, so they will always return the same results. Sum, Max, Min, … Alright, there are plenty of functions that returns useful values of all the data in a matrix, such as the max value, the min one, the sum of all the values, the mean of all the values etc. There is nothing easier than watch them in action. # 1. create a random value matrix set.seed(214) my_matrix2 &lt;- matrix(runif(n = 24, min = 1, max = 20), nrow = 4) my_matrix2 [,1] [,2] [,3] [,4] [,5] [,6] [1,] 7.079653 17.000935 12.786656 15.687742 1.260719 1.082183 [2,] 18.702227 14.015268 9.345658 4.225409 9.341111 11.385358 [3,] 10.809797 19.592980 13.632435 13.774924 19.548749 5.461854 [4,] 8.975963 7.808112 15.024569 6.271463 6.136042 16.151705 # 2. Calculate sum my_sum &lt;- sum(my_matrix2) print(paste(&quot;Sum of the values of my_matrix2:&quot;, my_sum)) [1] &quot;Sum of the values of my_matrix2: 265.101512494963&quot; # 3. Calculate min my_min &lt;- min(my_matrix2) print(paste(&quot;Min of the values of my_matrix2:&quot;, my_min)) [1] &quot;Min of the values of my_matrix2: 1.08218298689462&quot; # 4. Calculate max my_max &lt;- max(my_matrix2) print(paste(&quot;Max of the values of my_matrix2:&quot;, my_max)) [1] &quot;Max of the values of my_matrix2: 19.5929795864504&quot; # 5. Calculate mean my_mean &lt;- mean(my_matrix2) print(paste(&quot;Mean of the values of my_matrix2:&quot;, my_mean)) [1] &quot;Mean of the values of my_matrix2: 11.0458963539568&quot; Here, we calculate these stats for all the data in the matrix, but if I want to calculate it by rows or columns? Here it is Apply a function to all rows or columns You can easily think about summary function to answer the previous question. Right, I’ll give it to you, but how if you want to handle the result? How about having only the vector of the mean values for each row? This is achieved through apply. Let’s see it in action, then I’ll explain it. # 1. Calculate the mean for each column mean_col &lt;- apply(X = expr_data_t[, r_numb], MARGIN = 1, FUN = mean) # 2. Calculate the mean for each column mean_row &lt;- apply(X = expr_data_t[, r_numb], MARGIN = 2, FUN = mean) mean_col wt1 wt2 wt3 wt4 wt5 wt6 ko1 ko2 ko3 ko4 ko5 ko6 207.1429 178.2857 149.7143 101.8571 202.4286 209.0000 208.5714 231.8571 141.4286 225.2857 243.2857 343.4286 mean_row GPX2 BTN3A3 KRT17 USP17L2 PHF19 DBT PPM1B 0.5833333 35.6666667 0.2500000 0.5000000 112.1666667 642.8333333 632.6666667 See? It’s super easy. It requires the matrix (X), the function (mean), and the margin used to calculate over (1 for rows, 2 for columns). You can apply all the functions that take as input numeric vectors. If the matrix has row names or column names set, it returns a named vactor, otherwise it returns a normal vector. Exercises Now it’s you turn to familiarize with matrices. Exercise 9.1 You have collected expression levels of 4 genes of interest of 3 patients. Calculate the sum of the read for each patient, in order to normalize the values in further analysis. I’ll give you the data. CXCR4 &lt;- c(&quot;P1&quot; = 25, &quot;P2&quot; = 12, &quot;P3&quot; = 14) LCT &lt;- c(&quot;P3&quot; = 12, &quot;P2&quot; = 10, &quot;P1&quot; = 17) PTPN7 &lt;- c(&quot;P1&quot; = 2, &quot;P3&quot; = 3, &quot;P2&quot; = 4) LHX9 &lt;- c(&quot;P2&quot; = 20, &quot;P1&quot; = 28, &quot;P3&quot; = 11) Solution # 1. Reorder the vectors to have the same order of patients LCT &lt;- LCT[names(CXCR4)] PTPN7 &lt;- PTPN7[names(CXCR4)] LHX9 &lt;- LHX9[names(CXCR4)] # 2. Create the matrix expr_mat_pat &lt;- rbind(CXCR4, LCT, PTPN7, LHX9) # 3. Calculate the sum of the reads for each patient read_sum_pat &lt;- apply(expr_mat_pat, MARGIN = 2, mean) print(read_sum_pat) P1 P2 P3 18.0 11.5 10.0 Exercise 9.2 We know that genes which mean is &lt; 5, they should be excluded from the analysis (it is an example). Re-do the calculation of exercise 9.1 excluding those genes. Solution # 1. Calculate the mean of the reads for each gene read_sum_gene &lt;- apply(expr_mat_pat, MARGIN = 1, mean) # 2. Get the name of the genes to keep gene_2_keep &lt;- names(read_sum_gene)[read_sum_gene &gt; 5] # 3. Use genes_2_keep to subset matrix and calculate sum read_sum_pat_filt &lt;- apply(expr_mat_pat[gene_2_keep, ], MARGIN = 2, mean) print(read_sum_pat_filt) P1 P2 P3 23.33333 14.00000 12.33333 Great, another big chapter has come to an end. We are closer and closer to your real world applications. For your expression (mRNA or proteins) data you could already start some analysis, but wait for the next chapter, in which we will talk about data.frame. "],["data-frames.html", "10 Data frames Create a data.frame Indexing Create a new column Delete a column Export a data frame", " 10 Data frames Matrices can only be filled with the exact same type of data in all columns. This is useful when dealing with expression data that have to be manipulated for statistics, but usually we do not have only numbers in a table. For example, we could have all the meta data associated with different samples: age, treatment, sex, number of replicates, number of cells, etc. These are all different types of data, so we need a different “structure” that can store them for us. In R, this structure is called data.frame. Create a data.frame There are many ways to create a data.frame in R. We will explore them all, as you will use them in different situations. From matrix Let’s start from the least commonly utilized one (I know, you want to ask me “So why are you annoying me with this stuff?!”). We can transform a matrix into a data.frame using the function as.data.frame(). Usually, you do so when you want to add a new column to the matrix with a data type that is different from the one of the matrix (e.g. add a character column to a numeric matrix). Let’s see a quick example: # 1. Create a matrix my_matrix &lt;- matrix(rnorm(20), nrow = 4, ncol = 5) # 2. Check the class of my_matrix variable print(paste(&quot;Variable my_matrix is of class:&quot;, paste(class(my_matrix), collapse = &quot;, &quot;))) [1] &quot;Variable my_matrix is of class: matrix, array&quot; # 3. Transform the matrix into a data.frame my_df &lt;- as.data.frame(my_matrix) # 4. Check the class of my_df variable print(paste(&quot;Variable my_df is of class:&quot;, paste(class(my_df), collapse = &quot;, &quot;))) [1] &quot;Variable my_df is of class: data.frame&quot; And now? How do we add a new column? Eheh, keep calm, we will answer this question in a moment… From vectors We have to first look at another method to create a data.frame, that is starting from different vectors (as for a matrix). The syntax is this: data.frame(\"&lt;name_of_the_column&gt;\" = &lt;vector&gt;, \"&lt;name_of_the_column2\" = &lt;vector2&gt;, ...). This is useful when you have different information in different vectors and you want to merge them all, for example: # 1. Set the seed for sample function set.seed(362) # 2. Create vectors age &lt;- c(33, 29, 32, 41, 45, 67, 44, 18, 22, 21, 37, 36, 39, 45, 19, 20, 28, 30, 48, 50, 66, 26, 55, 56) sex &lt;- sample(x = c(&quot;M&quot;, &quot;F&quot;), size = length(age), replace = T) treatment &lt;- rep(x = c(&quot;CTRL&quot;, &quot;Inh1&quot;, &quot;Inh2&quot;), each = length(age)/3) weight &lt;- round(c(rnorm(n = length(age)/3, mean = 85, sd = 20), rnorm(n = length(age)/3, mean = 75, sd = 5), rnorm(n = length(age)/3, mean = 65, sd = 12)), 1) # 3. Create the data.frame my_df &lt;- data.frame(&quot;age&quot; = age, &quot;sex&quot; = sex, treatment = treatment, weight = weight) # 4. Visualize first rows head(my_df) age sex treatment weight 1 33 F CTRL 108.9 2 29 M CTRL 98.1 3 32 F CTRL 76.1 4 41 M CTRL 92.9 5 45 M CTRL 69.0 6 67 F CTRL 93.4 From file You will usually load a table from a file (csv, txt, tsv, etc) that you have written or that someone has given you. We have already seen how to read a csv file in the previous chapter, so let’s do the same to load our weight data (Download). # 1. Load data weight_data &lt;- read.csv(&quot;data/Weights.csv&quot;, header = T) # 2. Visualize first rows head(weight_data) age sex treatment weight 1 33 F CTRL 108.9 2 29 M CTRL 98.1 3 32 F CTRL 76.1 4 41 M CTRL 92.9 5 45 M CTRL 69.0 6 67 F CTRL 93.4 By default, the table is loaded as a data.frame. Indexing Indexing a data.frame is exactly the same as indexing a matrix. For this reason, I will only do some examples here, and invite you to look at the indexing section in matrices chapter for a deeper explanation. # 1. Extract males data males_data &lt;- weight_data[weight_data$sex == &quot;M&quot;,] head(males_data) age sex treatment weight 2 29 M CTRL 98.1 4 41 M CTRL 92.9 5 45 M CTRL 69.0 7 44 M CTRL 90.2 8 18 M CTRL 65.6 9 22 M Inh1 68.0 # 2. Extract controls sex and age ctrl_sex_age &lt;- weight_data[weight_data$treatment == &quot;CTRL&quot;, c(&quot;sex&quot;, &quot;age&quot;)] head(ctrl_sex_age) sex age 1 F 33 2 M 29 3 F 32 4 M 41 5 M 45 6 F 67 Create a new column I’m proud of you and your patience! Here we are to answer previous questions about how to add a new column to a data.frame. There are different ways to add a column to an existing database. We can use the “$” operator in this way: dataframe\\$new_column &lt;- vector. In this way we are telling R to insert vector as new_column in the data.frame. Similarly, we can use dataframe[\"&lt;new_column&gt;\"] &lt;- vector to do the same. Here an example: # 1. Add state column with value Italy for all rows weight_data$state &lt;- &quot;Italy&quot; # 2. Add city column with value Milan for all rows weight_data[&quot;city&quot;] &lt;- &quot;Milan&quot; # 3. Visualize first rows head(weight_data) age sex treatment weight state city 1 33 F CTRL 108.9 Italy Milan 2 29 M CTRL 98.1 Italy Milan 3 32 F CTRL 76.1 Italy Milan 4 41 M CTRL 92.9 Italy Milan 5 45 M CTRL 69.0 Italy Milan 6 67 F CTRL 93.4 Italy Milan Delete a column To delete a column from a data.frame, you should assign it the value NULL dataframe$column &lt;- NULL. If you want to delete multiple columns, you could use this form dataframe[, c(\"column1\", \"column2\", ...)] &lt;- NULL. Let’s now delete state and city columns from our dataframe: # 1. Delete rows weight_data[, c(&quot;state&quot;, &quot;city&quot;)] &lt;- NULL # 2. Visualize first rows head(weight_data) age sex treatment weight 1 33 F CTRL 108.9 2 29 M CTRL 98.1 3 32 F CTRL 76.1 4 41 M CTRL 92.9 5 45 M CTRL 69.0 6 67 F CTRL 93.4 Export a data frame Lastly, let’s imagine you have performed some operations on a data.frame (filtering, add columns, calculations etc) and you want to save it as a file, what you have to do is this: write.csv(x = weight_data, file = &quot;output/weight_modified.csv&quot;, quote = F, row.names = F) Let’s dissect this code: write.csv is the function used to save a csv file. You can also save a tsv file with write.tsv or write.table etc. There are plenty of them. I like csv so I’m using it. x is the data.frame to save file is the path were to save the dataframe quote is to tell whether to encapsulate each value into double quotes when saving (we don’t want it so we set it to F) row.names is to tell whether to write a column of the row names when saving. It is useful when the row names store useful information, such as patient ID, gene name etc. As in our case there is no information in row names, we set it to F. Great! We have now seen the basic operation to manipulate a data.frame object in R. Next step will be to do a real exploratory data analysis to discover new functions and start our real-world journey. "],["functions-packages-and-reproducibility.html", "11 Functions, packages and reproducibility Functions Packages Reproducibility", " 11 Functions, packages and reproducibility I’m sorry, I know last time I told you we would have start exploratory data analysis… but there are some crucial concepts that you should know prior to start your analysis: functions, packages and reproducibility. Functions We have encountered them quite a few times in previous chapters. We know that in R functions can be used by writing the name of the function, followed by parenthesis with some values in it. I’m not here to describe how to write new functions etc (if you want to know more about it, this is a useful guide), but you have to know that the functions we’ve seen (e.g. mean(), max(), median(), length()) are so-called “built-in”, so they are accessible in R since its installation. However, there are lots and lots of functions created by different “users” around the world that are fundamental for different types of analysis but that are not “pre-built” in R. They are collected in different packages. Packages So, you have to imagine a package as a box containing different functions that you want to use. “Right, and how can I use them?” Great question, let’s see how to install a package. Install a package To install a package you have to know in which repository it is stored (imagine a repository as a free App Store/Play Store). Most of the packages are store on CRAN (website), while the majority of genomic-related packages are store in Bioconductor (website). As we are going to use CRAN packages, here I show you how to install those packages. Let’s say we want to install tidyverse (which is a collection of packages that I love for data analysis), we will use the command install.packages(\"&lt;name_of_the_package&gt;\"). install.packages(&quot;tidyverse&quot;) I strongly suggest you to run this code and follow the instructions that pop up in the console. The process will take a while and if all worked fine, it should prompt “DONE The downloaded source packages are in….” at the end. Load a package Installing a package is not sufficient to be able to use its functions, you have to load it in every session you want to use it. So, I now it sounds like a big deal, but it’s easier than it seems: at the beginning of your script you have to write library(&lt;name_of_the_package&gt;) for each package you want to load. For example, in our case we will write: library(tidyverse) Now that we have loaded the package, we are able to use its functions. Reproducibility Here we are at the most important part of this chapter: data reproducibility. I mentioned you just few things about functions and packages, I know… but those concepts are important to understand how data reproducibility works. You know that reproducibility is a key aspect of every experiment and analysis. When you are analyzing data with R there are few things that are mandatory for reproducibility: Write every step and code you run Use set.seed for randomization steps Use the same version of R and of the packages As we have already seen the first 2 points, we will now discuss about the third one. When you are installing a package, you are installing a certain version if it. In fact, during time, packages changes with new functionalities, fixed bugs and so on. For this reason, the results of an analysis done with version 1.0 of a package may be different from the ones using version 5.2… it should not be the case, but some times it happens because the same functions may change a bit. So, how to control it? Control package versions To check which version of a package you have installed you can use the command packageVersion(\"&lt;name_of_the_package&gt;\"). For example: packageVersion(&quot;tidyverse&quot;) [1] &#39;2.0.0&#39; I have installed version 2.0.0 of tidyverse. DON’T worry if your version is not the same as mine (I know it sounds controversial, but here we are explaining things, you should stick with you own version). Session info Another way is to look at the sessionInfo, which returns all the package loaded in the current session (remember, a session starts when you start R and ends when you exit or restart R). sessionInfo() R version 4.1.0 (2021-05-18) Platform: x86_64-apple-darwin17.0 (64-bit) Running under: macOS 12.6.6 Matrix products: default LAPACK: /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRlapack.dylib locale: [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 attached base packages: [1] stats graphics grDevices utils datasets methods base other attached packages: [1] lubridate_1.9.2 forcats_1.0.0 stringr_1.5.0 dplyr_1.1.2 purrr_1.0.1 readr_2.1.4 tidyr_1.3.0 tibble_3.2.1 [9] ggplot2_3.4.2 tidyverse_2.0.0 loaded via a namespace (and not attached): [1] bslib_0.3.1 jquerylib_0.1.4 pillar_1.9.0 compiler_4.1.0 tools_4.1.0 digest_0.6.28 jsonlite_1.8.4 [8] evaluate_0.14 lifecycle_1.0.3 gtable_0.3.0 timechange_0.2.0 pkgconfig_2.0.3 rlang_1.1.1 cli_3.6.1 [15] rstudioapi_0.15.0 yaml_2.2.1 xfun_0.28 fastmap_1.1.0 withr_2.5.0 knitr_1.36 sass_0.4.0 [22] generics_0.1.1 vctrs_0.6.2 hms_1.1.3 grid_4.1.0 tidyselect_1.2.0 glue_1.6.2 R6_2.5.1 [29] fansi_0.5.0 bookdown_0.24 rmarkdown_2.11 tzdb_0.2.0 magrittr_2.0.3 scales_1.2.1 htmltools_0.5.2 [36] colorspace_2.0-2 utf8_1.2.2 stringi_1.7.5 munsell_0.5.0 Here it is reported the version of R, and of all the packages loaded during this session. You should use this command at the end of all your analyses, especially if you are using Markdown (we will see them soon, very soon) and provide it when you want to share the analysis to someone else (or publish a paper with an analysis performed in R). In fact, in “Material and Methods” section of a paper, you should write down the version of R and of the packages used for analyses. IMPORTANT: for all these reasons, you should NOT upgrade R or any packages you are using for an analysis, even if it asks you for any upgrade during packages installation. There are better ways to control package versions etc, but that is out of the scope of this book (if you are interested, go and learn about conda environments here). So, with these concepts in mind, let’s start our first data analysis in R in the next chapter. link versione pacchetto Importanza riproducibilità Versione pacchetti Conda environment (per approfondire), altrimenti non aggiornare mai. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
