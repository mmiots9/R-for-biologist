[["index.html", "Impariamo R, senza paura About", " Impariamo R, senza paura Matteo Miotto 2022-11-21 About Ciao Fede, eccoci arrivati a questo punto. Non sai quanto io sia contento, sia per me che per te: io imparer√≤ man mano ad ‚Äúinsegnare‚Äù, e tu imparerai un linguaggio che ti rivoluzioner√† la vita, ne sono sicuro ahahah Vedremo come accelerare le analisi, come automatizzarle, come slegarci da quel cancro che √® Excel, come fare bei grafici e come guadagnare tempo per fare altre cose. Per prima cosa per√≤, bisogna partire con l‚Äôinstallazione e qualche concetto base. Buon viaggio! "],["installazione.html", "1 Installazione", " 1 Installazione Per prima cosa, dobbiamo installare R, in modo tale da poterlo usare sul pc. Per fare ci√≤, collegati a questo sito e procedi con l‚Äôinstallazione come da istruzioni. ‚Ä¶ Fatto?! Ottimo, ora sei pronta ad usare R sul tuo pc, direttamente dal terminale; ma visto che √® un modo scomodo e antico, sfruttiamo le potenzialit√† e le funzianalit√† di RStudio per essere dei veri professionisti. Collegati qui e scarica questo fantastico programma. ‚Ä¶ Fatto?! Perfetto, ora lanciamoci in questo mondo e apriamo RStudio. "],["i-primi-passi-su-rstudio.html", "2 I primi passi su RStudio Console", " 2 I primi passi su RStudio Non farti intimidire da queste finestre che vedi aperte, pian piano le vedremo una ad una. Console Partiamo dalla console, ovvero lo spazio dove inizieremo a scrivere i primi comandi e dove vengono esposti gli output dei comandi. Proviamo subito con una cosa base, usando R come una calcolatrice, scrivendo sulla console 2 + 2 e premendo invio. 2+2 [1] 4 Vediamo che ci consegna come risultato 4. Ora puoi iniziare a giocare un po‚Äô con le varie operazioni, puoi scrivere anche lunghe espressioni e vedrai come immediatamente ti verr√† mostrato il risultato. ‚Ä¶ Ok, ma ora?! Beh, spesso ci serve che i risultati di alcune operazioni siano salvati, o spesso vogliamo usare lo stesso numero pi√π volte senza dovercelo ricordare, e qui entra in gioco il concetto di variabile. "],["variabili.html", "3 Variabili Creare una variabile Usare una variabile Nomenclatura delle variabili Sovrascrittura delle variabili Elencare le variabili Eliminare le variabili Tipi di variabile Esercizi", " 3 Variabili Come detto, spesso abbiamo bisogno che qualche numero (es una concentrazione), qualche tabella (es tabella dei differenziali), informazione (es il nome di una proteina) ecc siano salvati in R per poterli utilizzare successivamente nell‚Äôanalisi. Ecco che entrano in gioco le variabili, e ora vedremo come salvarle, come riutilizzarle, e che tupi di variabili esistono. Creare una variabile Per salvare una variabile si usa questa dicitura nome_della_variabile &lt;- cosa_salvare (al posto di &lt;- si pu√≤ usare anche =, ma spesso questo viene usato all‚Äôinterno delle funzioni per definire un argomento, ma lo vedremo pi√π avanti). Scriviamo questo sulla console e vediamo cosa succede: myvar &lt;- 5 Sulla console nulla, ma √® apparso qualcosa nella finestra chiamata Environment (se la tua √® diversa, pu√≤ essere che ci sia l‚Äôimpostazione vista ‚ÄúLista‚Äù al posto di ‚ÄúGrid‚Äù nel riquadro azzurrino, puoi cambiarla a tuo piacimento). Vediamo nel dettaglio queste informazioni: Name: il nome della variabile Type: il tipo di variabile (vedremo pi√π avanti di cosa si tratta) Length:: la lunghezza della variabile (quanti elementi contiene) Size: quanta memoria occupa quella variabile Value: il valore della variabile, in questo caso 5 Se vogliamo creare pi√π variabili con lo stesso valore possiamo fare cos√¨: var1 &lt;- var2 &lt;- var3 &lt;- 20 print(var1) [1] 20 print(var2) [1] 20 print(var3) [1] 20 Usare una variabile Per usare una variabile, ci baster√† scrivere il nome della variabile nella console. Se, per esempio, volessimo calcolare il quadrato di 5, scriveremmo questo ora: myvar ** 2 [1] 25 Ed ecco che ci viene mostrato il risultato (per calcolare la potenza si pu√≤ usare sia ** sia ^). E se volessimo salvare il risultato? Detto fatto, come prima: myvar_power &lt;- myvar ** 2 print(myvar_power) [1] 25 Usiamo print(myvar_power) per vedere qui il valore della variabile, avremmo potuto amche scrivere direttamente myvar_power. Vedremo pi√π avanti quando √® necessario usare print. Nomenclatura delle variabili Come in ogni cosa, anche nel nominare le variabili ci sono regole e linee guida. Non spaventarti, sono semplici e ti faciliteranno la vita, vediamole insieme. Regole: il nome della variabile NON pu√≤ iniziare con un carattere diverso da una lettera il nome pu√≤ contenere sia lettere che numeri (case sensitive, maiuscole e minuscole contano) il nome pu√≤ contenere come caratteri speciali solo il punto . o l‚Äôunderscore _ Linee guida: dal momento che il nome delle variabili deve essere utile, il suo nome deve suggerire qualcosa: per esempio, precedentemente era stata definita la variabile myvar, il cui significato √® pari a 0 (evita dunque questi nomi), mentre myvar_power √® gi√† pi√π indicativo, in quanto ci dice che √® elevato ad una potenza normalmente le variabili si scrivono con le lettere minuscole, tranne quelle che vuoi che rimangano costanti nella tua analisi, che in altri linguaggi si scrivono in maiuscolo (questo non le fa diventare immutabili, ma ci suggerisce questa caratteristica all‚Äôinterno dello script) tra i caratteri speciali, usa l‚Äôunderscore piuttosto che il punto se puoi se il nome della variabile contiene pi√π di una parola, puoi separarle con l‚Äôunderscore (come nell‚Äôesempio) o usare il camel case (myvarPower) o il Pascal case (MyvarPower) sii coerente all‚Äôinterno dello script: se decidi di usare il Pascal case, usa sempre il Pascal case in quello script Sovrascrittura delle variabili Attenzione! Le variabili possono essere sovrascritte (azione irrimediabile). Per sovrascrivere una variabile, basta assegnare a quella variabile un nuovo valore: print(myvar) [1] 5 myvar &lt;- 9 print(myvar) [1] 9 Ora myvar √® uguale a 9, e non c‚Äô√® alcun modo di tornare indietro‚Ä¶ Questa caratteristica √® utile per salvare spazio e non occuparne troppo con variabili che va bene che cambino spesso, ma pu√≤ essere rischiosa. Bisogna quindi stare attenti quando si nominano le variabili. Elencare le variabili Un modo utile per evitare di sovrascrivere una variabile importante √® elencare le variabili. Sappiamo che su RStudio sono tutte presenti nella finestra Environment, ma se non fossimo su RStudio ma da altre parti (per esempio sul terminale)? La risposta √® semplice, usiamo la funzione ls() ls() [1] &quot;a&quot; &quot;b&quot; &quot;day&quot; &quot;month&quot; &quot;myvar&quot; &quot;myvar_power&quot; &quot;sum_birth&quot; [8] &quot;var1&quot; &quot;var2&quot; &quot;var3&quot; &quot;varB&quot; &quot;varD&quot; &quot;year&quot; Ecco elencate le nostre variabili. Nota come ho chiamato questo comando col nome funzione: questo concetto lo vedremo bene pi√π avanti, per ora ti basta sapere che esistono e che si possono individuare subito dal fatto che dopo il nome c‚Äô√® una coppia di patentesi tonde. Eliminare le variabili Per eliminare una variabile si usa la funzione rm() e si inserisce la variabile da eliminare: # creiamo una variabile to_remove &lt;- 1213 # elenchiamo le variabili attuali ls() [1] &quot;a&quot; &quot;b&quot; &quot;day&quot; &quot;month&quot; &quot;myvar&quot; &quot;myvar_power&quot; &quot;sum_birth&quot; [8] &quot;to_remove&quot; &quot;var1&quot; &quot;var2&quot; &quot;var3&quot; &quot;varB&quot; &quot;varD&quot; &quot;year&quot; # rimuoviamo la variabile appena create rm(to_remove) # elenchiamo di nuovo le variabili ls() [1] &quot;a&quot; &quot;b&quot; &quot;day&quot; &quot;month&quot; &quot;myvar&quot; &quot;myvar_power&quot; &quot;sum_birth&quot; [8] &quot;var1&quot; &quot;var2&quot; &quot;var3&quot; &quot;varB&quot; &quot;varD&quot; &quot;year&quot; Come vediamo, nel secondo caso √® stata rimossa la variabile to_remove. E se volessi rimuovere pi√π variabili? Inseriamo pi√π nomi di variabili dentro la funzione rm() separati da virgole: # creiamo pi√π variabili to_remove &lt;- 1213 to_remove2 &lt;- 685 # elenchiamo le variabili attuali ls() [1] &quot;a&quot; &quot;b&quot; &quot;day&quot; &quot;month&quot; &quot;myvar&quot; &quot;myvar_power&quot; &quot;sum_birth&quot; [8] &quot;to_remove&quot; &quot;to_remove2&quot; &quot;var1&quot; &quot;var2&quot; &quot;var3&quot; &quot;varB&quot; &quot;varD&quot; [15] &quot;year&quot; # rimuoviamo le variabili appena create rm(to_remove, to_remove2) # elenchiamo di nuovo le variabili ls() [1] &quot;a&quot; &quot;b&quot; &quot;day&quot; &quot;month&quot; &quot;myvar&quot; &quot;myvar_power&quot; &quot;sum_birth&quot; [8] &quot;var1&quot; &quot;var2&quot; &quot;var3&quot; &quot;varB&quot; &quot;varD&quot; &quot;year&quot; Le due variabili sono state rimosse. Ma guardando bene questi codici, vediamo che alcuni iniziano con # e non vengono valutati. Cosa sono? Sono i commenti, ovvero messaggi che ti scriverai negli script (e vedremo a breve come crearli) per facilitarti nel capire cosa stai facendo. Sono dei veri e propri commenti che puoi aggiungere, e non verranno ‚Äúvalutati‚Äù come codice in quanto la riga inizia con #. Tipi di variabile Finora tutto lineare, vero? Benissimo, continuer√† ad esserlo tranquilla üôÉ. Vediamo quali sono i basilari tipi di variabili che esistono in R, perch√® non esistono mica solo i numeri: Numeric: numeri, possono essere integer (numeri interi) o double (numeri decimali) Character: caratteri, quindi stringhe di lettere (parole, frasi ecc) Boolean: TRUE o FALSE, sono un particolare tipo di variabile che R interpreta a modo suo, ma super super super utile Vedremo bene nel dettaglio ogni tipo di variabile nei prossimi capitoli. Per sapere di che tipo √® una variabile usiamo la funzione typeof(): typeof(myvar) [1] &quot;double&quot; Vediamo che myvar √® un double (nonostante sia un valore intero), questo perch√® R di base interpreta ogni numero come double, in modo tale da aumentarne la precisione e la possibilit√† di interagire tra vari numeri senza avre problemi di tipo. Esercizi Ok, questa lezione √® stata abbastanza lunga, facciamo qualche esercizio per fissare questi concetti bene. Esercizio 3.1 Crea 3 variabili che indicano il giorno, il mese e l‚Äôanno della tua nascita (tutti numeri) e vedi i loro valori Soluzione day &lt;- 17 month &lt;- 4 year &lt;- 1996 print(day) [1] 17 print(month) [1] 4 print(year) [1] 1996 Esercizio 3.2 Crea una variabile sum_birth che contiene la somma delle variabili create nell‚Äôesercizio 3.1 e vedi il risultato. Soluzione sum_birth &lt;- day + month + year print(sum_birth) [1] 2017 Esercizio 3.3 Crea 4 variabili (chiamale come vuoi) che contengono il valore 14. Visualizza i nomi di tutte le variabili, elimina due delle variabili appena create e poi visualizza di nuovo i nomi delle variabili. Soluzione # creo 4 variabili con lo stesso valore varA &lt;- varB &lt;- varC &lt;- varD &lt;- 14 # visualizzo i nomi di tutte le variabili ls() [1] &quot;a&quot; &quot;b&quot; &quot;day&quot; &quot;month&quot; &quot;myvar&quot; &quot;myvar_power&quot; &quot;sum_birth&quot; [8] &quot;var1&quot; &quot;var2&quot; &quot;var3&quot; &quot;varA&quot; &quot;varB&quot; &quot;varC&quot; &quot;varD&quot; [15] &quot;year&quot; # elimino due delle variabili appena create rm(varA, varC) # visualizzo i nomi delle variabili appena create ls() [1] &quot;a&quot; &quot;b&quot; &quot;day&quot; &quot;month&quot; &quot;myvar&quot; &quot;myvar_power&quot; &quot;sum_birth&quot; [8] &quot;var1&quot; &quot;var2&quot; &quot;var3&quot; &quot;varB&quot; &quot;varD&quot; &quot;year&quot; Ottimo, se sei riuscita a fare tutti gli esercizi (e sono sicuro sia cos√¨), passa al prossimo capitolo dove inizieremo a guarare nel dettaglio i numeri, come maneggiarli e le operazioni che ci possiamo fare sopra. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
