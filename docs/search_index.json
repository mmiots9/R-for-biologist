[["index.html", "Learn R for biologist, with no fear About", " Learn R for biologist, with no fear Matteo Miotto 2022-11-24 About Ciao Fede, here we are. You really don’t know how happy I am for both of us: I’ll learn how to “teach”, while you’ll learn a coding language that will revolutionize your life, I’m sure of it hahaha We’ll see how to speed up analyses, how to automate them, how to untie ourselves from that cancer that is Excel, how to make beautiful graphs and how to gain time to do other things. First, you need to start with the installation and some basic concepts. Let’s start this beautiful journey! "],["installation.html", "1 Installation", " 1 Installation First of all, we need to install R to be able to use it. To do so, go to this link and follow the instruction for the installation. … Done?! Great, now you can start using R on your pc, directly from your terminal: but since it is an inconvenient and ancient way, let’s take advantage of the potential and functions of RStudio to be true professionals. Go here and download this amazing software. … Done?! Perfect, let’s open it. "],["first-step-in-rstudio.html", "2 First step in RStudio Console", " 2 First step in RStudio Don’t be intimidated by all these windows that you see open, we will slowly dig into them one by one. Console Let’s start from the console, that is the space where we will start writing the first commands and where their outputs are displayed. Let’s try a basic thing right away, using R as a calculator, type 2 + 2 on the console and press enter. 2+2 [1] 4 Easy right? It returns 4. Now you can start playing a bit with the various operations, you can also write long expressions and you will see how the result will be shown immediately. … Ok, but… usually we need the results of some operation to be saved, or often we want to use the same number several times without having to remember it, and this is where the concept of variable comes into play. "],["variables.html", "3 Variables Create a variable Use a variable Variable names Overwriting variables List all variables Delete variables Type of variables Exercises", " 3 Variables As mentioned, we often need some number (eg a concentration), some table (eg table of differentially expressed genes), information (eg the name of a protein) etc. to be saved in R to be able to use them later in the analysis. This is where variables come into play, and now we’ll see how to create them, how to reuse them, and what kinds of variables exist. Create a variable To create a variable we write name_of_the_variable &lt;- what_to_save (you can either use = instead of &lt;-, even if the former is usually used for declaring arguments in a function, but we’ll see it later). Now, write this to the console, click Return/send on the keyborard, and see what happens: myvar &lt;- 5 On the console nothing happens, but something appeared in the window called Environment (if yours is different, it may be that there is the “List” view setting instead of “Grid” in the blue box, you can change it to your liking). Here in details the info given for each variable: Name: name of the variable Type: type of the variable (don’t worry, we’ll see in a minute what this means) Length:: the length of the variable (how many items it contains) Size: how much memory that variable occupies Value: the value of our variable If we want to create multiple variables with the same value we can do this: var1 &lt;- var2 &lt;- var3 &lt;- 20 print(var1) [1] 20 print(var2) [1] 20 print(var3) [1] 20 Use a variable Ok, but once stored, how to we use a variable? Easy, we just need to type it in the console (or start writing the first letters of its name and press Tab to show RStudio suggestions). If, for example, we want to calculate the power of our variable we should write: myvar ** 2 [1] 25 And here is the result (to elevate to the power we can either use ** or ^). And what if we want to store this result? As before: myvar_power &lt;- myvar ** 2 print(myvar_power) [1] 25 Here we use print() function, but in R we can also just write the name of the variable to see it. Variable names As in everything, even in naming variables there are rules and guidelines. Don’t be scared, they are simple and will make your life easier, let’s see them together. Rules: Variable name CANNOT start with a character other than a letter Variable name can contain both letters and numbers (case sensitive, uppercase and lowercase matter) Variable name may contain as special characters only the dot . or the underscore _ Guidelines: Since the name of the variable must be useful, its name must suggest something: for example, the variable myvar was previously defined, whose meaning is equal to 0 (so avoid these names), while myvar_power is more indicative, as it tells us that it is raised to a power Variables are normally written in lowercase letters, except for those you want to remain constant in your analysis, which in other languages are written in uppercase (this does not make them immutable, but suggests this feature within the script) Use underscores rather than periods as special characters in variable names if you can If the variable name contains more than one word, you can separate them with an underscore (as in the example) or use the camel case (myvarPower) or the Pascal case (MyvarPower) Be consistent within the script: if you decide to use the Pascal case, always use the Pascal case in that script Overwriting variables Attention! Variables can be overwritten (unrecoverable action). To override a variable, simply assign that variable a new value: print(myvar) [1] 5 myvar &lt;- 9 print(myvar) [1] 9 Now myvar is equal to 9, and there is no way back… This feature is useful for saving space and not cluttering up too much with variables that are okay to change often, but it can be risky. So be careful when naming variables. List all variables A useful way to avoid overwriting an important variable is to list the variables. We know that in RStudio they are all present in the Environment window, but what if we weren’t in RStudio but elsewhere (for example in the terminal)? The answer is simple, let’s use the ls() function ls() [1] &quot;mean_res_better&quot; &quot;mean_res_better_round&quot; &quot;mean_result_calc&quot; &quot;mice1&quot; [5] &quot;mice2&quot; &quot;mice3&quot; &quot;mice4&quot; &quot;mynumber&quot; [9] &quot;mystring&quot; &quot;myvar&quot; &quot;myvar_power&quot; &quot;n_rep&quot; [13] &quot;rep1&quot; &quot;rep2&quot; &quot;rep3&quot; &quot;sd_calc&quot; [17] &quot;sd_calc_ceil&quot; &quot;sd_calc_floor&quot; &quot;sd_calc_round&quot; &quot;sum_weights&quot; [21] &quot;var_calc&quot; &quot;var1&quot; &quot;var2&quot; &quot;var3&quot; Here are our variables. Note how I called this command with the name function: we will cover this concept later, for now you just need to know that they exist and that they can be identified immediately by the fact that after the name there is a pair of round brackets. Delete variables To delete a variable, use the rm() function and insert the variable to be deleted: # create a variable to_remove &lt;- 1213 # list all variables ls() [1] &quot;mean_res_better&quot; &quot;mean_res_better_round&quot; &quot;mean_result_calc&quot; &quot;mice1&quot; [5] &quot;mice2&quot; &quot;mice3&quot; &quot;mice4&quot; &quot;mynumber&quot; [9] &quot;mystring&quot; &quot;myvar&quot; &quot;myvar_power&quot; &quot;n_rep&quot; [13] &quot;rep1&quot; &quot;rep2&quot; &quot;rep3&quot; &quot;sd_calc&quot; [17] &quot;sd_calc_ceil&quot; &quot;sd_calc_floor&quot; &quot;sd_calc_round&quot; &quot;sum_weights&quot; [21] &quot;to_remove&quot; &quot;var_calc&quot; &quot;var1&quot; &quot;var2&quot; [25] &quot;var3&quot; # delete just-created variable rm(to_remove) # list all variables ls() [1] &quot;mean_res_better&quot; &quot;mean_res_better_round&quot; &quot;mean_result_calc&quot; &quot;mice1&quot; [5] &quot;mice2&quot; &quot;mice3&quot; &quot;mice4&quot; &quot;mynumber&quot; [9] &quot;mystring&quot; &quot;myvar&quot; &quot;myvar_power&quot; &quot;n_rep&quot; [13] &quot;rep1&quot; &quot;rep2&quot; &quot;rep3&quot; &quot;sd_calc&quot; [17] &quot;sd_calc_ceil&quot; &quot;sd_calc_floor&quot; &quot;sd_calc_round&quot; &quot;sum_weights&quot; [21] &quot;var_calc&quot; &quot;var1&quot; &quot;var2&quot; &quot;var3&quot; As we see, in the second case the to_remove variable has been removed. What if I want to remove multiple variables? Let’s put multiple variable names inside the rm() function separated by commas: # create various variables to_remove &lt;- 1213 to_remove2 &lt;- 685 # list all variables ls() [1] &quot;mean_res_better&quot; &quot;mean_res_better_round&quot; &quot;mean_result_calc&quot; &quot;mice1&quot; [5] &quot;mice2&quot; &quot;mice3&quot; &quot;mice4&quot; &quot;mynumber&quot; [9] &quot;mystring&quot; &quot;myvar&quot; &quot;myvar_power&quot; &quot;n_rep&quot; [13] &quot;rep1&quot; &quot;rep2&quot; &quot;rep3&quot; &quot;sd_calc&quot; [17] &quot;sd_calc_ceil&quot; &quot;sd_calc_floor&quot; &quot;sd_calc_round&quot; &quot;sum_weights&quot; [21] &quot;to_remove&quot; &quot;to_remove2&quot; &quot;var_calc&quot; &quot;var1&quot; [25] &quot;var2&quot; &quot;var3&quot; # delete just-created variables rm(to_remove, to_remove2) # list all variables ls() [1] &quot;mean_res_better&quot; &quot;mean_res_better_round&quot; &quot;mean_result_calc&quot; &quot;mice1&quot; [5] &quot;mice2&quot; &quot;mice3&quot; &quot;mice4&quot; &quot;mynumber&quot; [9] &quot;mystring&quot; &quot;myvar&quot; &quot;myvar_power&quot; &quot;n_rep&quot; [13] &quot;rep1&quot; &quot;rep2&quot; &quot;rep3&quot; &quot;sd_calc&quot; [17] &quot;sd_calc_ceil&quot; &quot;sd_calc_floor&quot; &quot;sd_calc_round&quot; &quot;sum_weights&quot; [21] &quot;var_calc&quot; &quot;var1&quot; &quot;var2&quot; &quot;var3&quot; The two variables have been removed. But looking closely at these codes, we see that some start with # and are not evaluated. What are they? These are the comments, i.e. messages that you will write in the scripts (and we will see later how to create them) to help you understand what you are doing. They are actual comments that you can add, and will not be “evaluated” as code as the line starts with #. Type of variables So far so linear, right? Great, it will continue to be as easy 🙃. Let’s see what are the basic types of variables that exist in R: Numeric: numbers, can be integer (whole numbers) or double (decimal numbers) Character: characters, therefore strings of letters (words, sentences, etc.) Boolean: TRUE or FALSE, are a special type of variable that R interprets in its own way, but super super super useful Factor: similar to character, but with peculiar features (and memory saving), often used for categorical variables such as male/female, heterozygous/wild-type We will see each type of variable in detail in next chapters. To find out what type a variable is we use the typeof() function: typeof(myvar) [1] &quot;double&quot; We see that myvar is a double (although it is an integer value), this is because R basically interprets every number as a double, so as to increase its precision and the possibility of operations between various numbers without having type problems. Exercises Ok, this chapter was long enough, let’s do some exercises to fix well these concepts. Exercise 3.1 Create 3 variables indicating the weights of 3 mice. Solution mice1 &lt;- 5.8 mice2 &lt;- 4.8 mice3 &lt;- 7.5 print(mice1) [1] 5.8 print(mice2) [1] 4.8 print(mice3) [1] 7.5 Exercise 3.2 Create the variable sum_weights as the sum of the weights of those 3 mice. Solution sum_weights &lt;- mice1 + mice2 + mice3 print(sum_weights) [1] 18.1 Exercise 3.3 Create 4 other variables for other 4 mice that weight 20 g. Then you realize you did a mistake and you choose to delete 3 of them and change the fourth to 7.7. Solution # create 4 variables mice4 &lt;- mice5 &lt;- mice6 &lt;- mice7 &lt;- 20 # list all variables ls() [1] &quot;mean_res_better&quot; &quot;mean_res_better_round&quot; &quot;mean_result_calc&quot; &quot;mice1&quot; [5] &quot;mice2&quot; &quot;mice3&quot; &quot;mice4&quot; &quot;mice5&quot; [9] &quot;mice6&quot; &quot;mice7&quot; &quot;mynumber&quot; &quot;mystring&quot; [13] &quot;myvar&quot; &quot;myvar_power&quot; &quot;n_rep&quot; &quot;rep1&quot; [17] &quot;rep2&quot; &quot;rep3&quot; &quot;sd_calc&quot; &quot;sd_calc_ceil&quot; [21] &quot;sd_calc_floor&quot; &quot;sd_calc_round&quot; &quot;sum_weights&quot; &quot;var_calc&quot; [25] &quot;var1&quot; &quot;var2&quot; &quot;var3&quot; # delete 3 of the just-created variables rm(mice5, mice6, mice7) # list all variables ls() [1] &quot;mean_res_better&quot; &quot;mean_res_better_round&quot; &quot;mean_result_calc&quot; &quot;mice1&quot; [5] &quot;mice2&quot; &quot;mice3&quot; &quot;mice4&quot; &quot;mynumber&quot; [9] &quot;mystring&quot; &quot;myvar&quot; &quot;myvar_power&quot; &quot;n_rep&quot; [13] &quot;rep1&quot; &quot;rep2&quot; &quot;rep3&quot; &quot;sd_calc&quot; [17] &quot;sd_calc_ceil&quot; &quot;sd_calc_floor&quot; &quot;sd_calc_round&quot; &quot;sum_weights&quot; [21] &quot;var_calc&quot; &quot;var1&quot; &quot;var2&quot; &quot;var3&quot; # change the value of one variable mice4 &lt;- 7.7 print(mice4) [1] 7.7 Alright, if you have done all the exercises (and I’m sure you have), we can move on to the next chapter in which we briefly talk about scripts and saving the environment. "],["scripts.html", "4 Scripts Save Source a script", " 4 Scripts Ok, let’s take a break before all the theoretical chapters to discuss about scripts. I always say this word when talking to you about my job, but what are they? A script is essentially an ordered list of commands, used to not have to write again and again the same commands on the console. It can contain everything you type in the console, like functions, operations and even comments; in this way, you can do an analysis and store it as a “text” file that you can use as reference (so you know what you have done), use for another analysis, edit, share with others… You will always write code in scripts, for all these reasons. Let’s see how to create a script, write some code in it and run part of the script or even a small part of it in RStudio. In the video we see a series of actions: To create a script, click the button on top left, then select “R Script” (or File -&gt; New File -&gt; R Script) Start writing the commands (even comments) To run a single line click “Run” To run the whole script (R starts from the beginning) click “Source”) Suggetion: Comment, comment, comment everything. I know it is time consuming, but you will be so happy and greatful to read comments that help you understand what you’ve done months (or weeks) before. Save To save a script “File -&gt; Save” or the usual shortcut “Ctrl-S” (Windows) or “Cmd-S” (MacOS). Use them for all the exercise from now on! Source a script Source a script from the console instead of having to open it and source from RStudio is very useful when you want to save time and create re-usable pipelines or analysis. Sourcing a script means to execute all the line of codes in that script. It can be archieved by doing source(\"path_to_file\"). Now, head to the next chapter in which we will talk about numbers. "],["numbers.html", "5 Numbers Operations Rounding Tranform to type number Exercises", " 5 Numbers I know you know what numbers are, and we’ve already seen that we have two types of numbers in R: integers and doubles; so, let’s move to see them in action. Operations First of all, here is how to do basic mathematical operation in R: # Plus, minus, multiply, divide 5 + 4 - 2 * 3 / 2 [1] 6 # Power 4 ** 3 [1] 64 # Logarithm log(100) # base e [1] 4.60517 log10(100) # base 10 [1] 2 log2(100) # base 2 [1] 6.643856 log(100, base = 3) # choose the base [1] 4.191807 # Natural exponential exp(2) [1] 7.389056 # Square root sqrt(9) [1] 3 An interesting operator is the modulus (%%) which returns the remainder of a division, for example: 7 %% 3 [1] 1 This can be useful to evaluate if a number is even or odd by calculating the remainder of the division x / 2 (so using x %% 2): if it is 0, the number x is even, otherwise it is odd. 11 %% 2 [1] 1 12 %% 2 [1] 0 Rounding Another thing that we usually want to do is to round decimal number, especially after log transformation or division. To do so, we have 3 functions: # Round to n decimal places round(x = 1/3, digits = 2) [1] 0.33 # Round to upper integer ceiling(10.2) [1] 11 # Round to lower integer floor(14.9) [1] 14 Look how ceiling and floor do not take into account the decimal part, even if it is greater or lower than 0.5. Tranform to type number Sometimes you want to transform a string that contains a number to a numeric type in R. I know we haven’t covered strings yet (next chapter will be on them), but let’s do a bit step forward now just to see this super useful function, that we use a lot when dealing with dataframes. To do so, we’ll use the function called as.numeric() mystring &lt;- &quot;15&quot; # This is a string, can you guess why R interpret it as a string? typeof(mystring) [1] &quot;character&quot; mynumber &lt;- as.numeric(mystring) typeof(mynumber) [1] &quot;double&quot; Wow, you will find this super super super useful. Exercises Let’s now put in practice what we have seen in this chapter and in the previous (remember? the script… I want you to write a script with these exercises and save it) Exercise 5.1 The results of a Real-Time PCR indicate that your triplicates for FOXP1 have these Ct: 22.4, 22.31, 22.24. Calculate the mean value and print it rounded to 2 decimal places. Solution # calculator solution mean_result_calc &lt;- (22.4 + 22.31 + 22.24) / 3 mean_result_calc &lt;- round(mean_result_calc, digits = 2) print(mean_result_calc) [1] 22.32 # BETTER solution rep1 &lt;- 22.4 rep2 &lt;- 22.31 rep3 &lt;- 22.24 n_rep &lt;- 3 mean_res_better &lt;- (rep1 + rep2 + rep3) / n_rep mean_res_better_round &lt;- round(mean_res_better, digits = 2) print(mean_res_better_round) [1] 22.32 The second solution is better because every number is stored in a variable, that you then use to calculate the mean value. Exercise 5.2 Now calculate the sd of the data of exercise 5.1 and print the value rounded to upper integer, to lower integer and to a 4-digit decimal. Solution # Use only better solution, first calculate the variance var_calc &lt;- ((rep1 - mean_res_better)^2 + (rep2 - mean_res_better)^2 + (rep3 - mean_res_better)^2) / (n_rep - 1) # Now let&#39;s calculate sd sd_calc &lt;- sqrt(var_calc) sd_calc_ceil &lt;- ceiling(sd_calc) print(sd_calc_ceil) [1] 1 sd_calc_floor &lt;- floor(sd_calc) print(sd_calc_floor) [1] 0 sd_calc_round &lt;- round(sd_calc, digits = 4) print(sd_calc_round) [1] 0.0802 Ok, now you’re ready to learn about strings, let’s go. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
